  {
    "displayText": "endnetent()",
    "snippet": "endnetent()${1:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Closes the net database.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "endprotoent()",
    "snippet": "endprotoent()${1:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Closes the protocol database.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "endservent()",
    "snippet": "endservent()${1:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Closes the service database.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "getnetent()",
    "snippet": "getnetent()${1:}",
    "type": "function",
    "leftLabel": "struct netent *",
    "description": "Open the net database and read the next line.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "getprotoent()",
    "snippet": "getprotoent()${1:}",
    "type": "function",
    "leftLabel": "struct protoent *",
    "description": "Get protocol entry.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "getservent()",
    "snippet": "getservbyport()${1:}",
    "type": "function",
    "leftLabel": "struct servent *",
    "description": "Get service entry.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "inet_aton(cp, addr)",
    "snippet": "inet_aton(${1:char *cp}, ${2:struct in_addr *addr})${3:}",
    "type": "function",
    "leftLabel": "long",
    "description": "Internet address manipulation.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "setnetent(stayopen)",
    "snippet": "setnetent(${1:int stayopen})${2:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Get network entry.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "setprotoent(stayopen)",
    "snippet": "setprotoent(${1:int stayopen})${2:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Get protocol entry.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "setservent(stayopen)",
    "snippet": "setservent(${1:int stayopen})${2:}",
    "type": "function",
    "leftLabel": "void",
    "description": "Get service entry.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AbortInterfaceConfig(message)",
    "snippet": "AbortInterfaceConfig(${1:struct AddressAllocationMessage *message})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Attempt to abort an IP address allocation process currently in progress.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddDomainNameServer(address)",
    "snippet": "AddDomainNameServer(${1:STRPTR address})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Add another domain name server address to the local resolver database.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddInterfaceTagList(interface_name, device_name, unit, tags)",
    "snippet": "AddInterfaceTagList(${1:STRPTR interface_name}, ${2:STRPTR device_name}, ${3:LONG unit}, ${4:struct TagItem *tags})${5:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Make a new interface available for network access.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddInterfaceTags(interface_name, device_name, unit, ...)",
    "snippet": "AddInterfaceTags(${1:STRPTR interface_name}, ${2:STRPTR device_name}, ${3:LONG unit}, ${4:...})${5:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Make a new interface available for network access. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddNetMonitorHookTagList(type, hook, tags)",
    "snippet": "AddNetMonitorHookTagList(${1:LONG type}, ${2:struct Hook *hook}, ${3:struct TagItem *tags})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Add a network monitoring callback hook.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddNetMonitorHookTags(type, hook, ...)",
    "snippet": "AddNetMonitorHookTags(${1:LONG type}, ${2:struct Hook *hook}, ${3:...})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Add a network monitoring callback hook. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddRouteTagList(tags)",
    "snippet": "AddRouteTagList(${1:struct TagItem *tags})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Add entries to the networking routing tables.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "AddRouteTags(...)",
    "snippet": "AddRouteTags(${1:...})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Add entries to the networking routing tables. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "BeginInterfaceConfig(message)",
    "snippet": "BeginInterfaceConfig(${1:struct AddressAllocationMessage *message})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Attempt to allocate an IP address for an interface.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_close(channel)",
    "snippet": "bpf_close(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Close a packet filter channel.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_data_waiting(channel)",
    "snippet": "bpf_data_waiting(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Query whether there is data waiting to be read with bpf_read()",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_ioctl(channel, command, buffer)",
    "snippet": "bpf_ioctl(${1:LONG channel}, ${2:ULONG command}, ${3:APTR buffer})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Control packet filter parameters.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_open(channel)",
    "snippet": "bpf_open(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Open a packet filter channel.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_read(channel, buffer, len)",
    "snippet": "bpf_read(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Read data from a packet filter channel.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_set_interrupt_mask(channel, signal_mask)",
    "snippet": "bpf_set_interrupt_mask(${1:LONG channel}, ${2:ULONG signal_mask})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Choose which signals will cause the bpf_read() call to be interrupted.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_set_notify_mask(channel, signal_mask)",
    "snippet": "bpf_set_notify_mask(${1:LONG channel}, ${2:ULONG signal_mask})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Choose the signals to send when new packet data is available for reading.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "bpf_write(channel, buffer, len)",
    "snippet": "bpf_write(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Write data to an interface associated with a packet filter channel.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ChangeRoadshowData(list, name, length, data)",
    "snippet": "ChangeRoadshowData(${1:struct List *list}, ${2:STRPTR name}, ${3:ULONG len}, ${4:APTR data})${5:}",
    "type": "function",
    "leftLabel": "BOOL",
    "description": "Change internal Roadshow configuration data.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ConfigureInterfaceTagList(interface_name, tags)",
    "snippet": "ConfigureInterfaceTagList(${1:STRPTR interface_name}, ${2:struct TagItem *tags})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Configure an interface.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ConfigureInterfaceTags(interface_name, ...)",
    "snippet": "ConfigureInterfaceTags(${1:STRPTR interface_name}, ${2:...})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Configure an interface. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "CreateAddrAllocMessage(version, protocol, interface_name, result_ptr, ...)",
    "snippet": "CreateAddrAllocMessage(${1:LONG version}, ${2:LONG protocol}, ${3:STRPTR interface_name}, ${4:struct AddressAllocationMessage ** result_ptr}, ${5:...})${6:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Create a message to be used with the BeginInterfaceConfig(). (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "CreateAddrAllocMessageA(version, protocol, interface_name, result_ptr, tags)",
    "snippet": "CreateAddrAllocMessageA(${1:LONG version}, ${2:LONG protocol}, ${3:STRPTR interface_name}, ${4:struct AddressAllocationMessage ** result_ptr}, ${5:struct TagItem *tags})${6:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Create a message to be used with the BeginInterfaceConfig().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "DeleteAddrAllocMessage(addressAllocationMessage)",
    "snippet": "DeleteAddrAllocMessage(${1:struct AddressAllocationMessage *aam})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Release the memory allocation for an address allocation message created by CreateAddrAllocMessageA().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "DeleteRouteTagList(tags)",
    "snippet": "DeleteRouteTagList(${1:struct TagItem *tags})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Remove entries from the networking routing tables.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "DeleteRouteTags(...)",
    "snippet": "DeleteRouteTags(${1:...})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Remove entries from the networking routing tables. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FreeRouteInfo(buf)",
    "snippet": "FreeRouteInfo(${1:struct rt_msghdr *buf})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Release information obtained by GetRouteInfo().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "GetDefaultDomainName(buffer, size)",
    "snippet": "GetDefaultDomainName(${1:STRPTR buffer}, ${2:LONG size})${3:}",
    "type": "function",
    "leftLabel": "BOOL",
    "description": "Retrieve domain name for host names which lack a domain name.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "GetNetworkStatistics(type, version, destination, size)",
    "snippet": "GetNetworkStatistics(${1:LONG type}, ${2:LONG version}, ${3:APTR destination}, ${4:LONG size})${5:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Obtain network usage statistics.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "GetRouteInfo(address_family, flags)",
    "snippet": "GetRouteInfo(${1:LONG address_family}, ${2:LONG flags})${3:}",
    "type": "function",
    "leftLabel": "struct rt_msghdr*",
    "description": "Obtain information on the routing tables.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "In_CanForward(address)",
    "snippet": "In_CanForward(${1:in_addr_t address})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Determine whether an IP address is in a reserved set of addresses that may not be forwarded, or whether datagrams to that destination may be forwarded.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "In_LocalAddr(address)",
    "snippet": "In_LocalAddr(${1:in_addr_t address})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Check if an internet address is for a 'local' host.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "inet_ntop(addressFamily, source, dest, size)",
    "snippet": "inet_ntop(${1:LONG addrFmly}, ${2:APTR src}, ${3:STRPTR dest}, ${4:LONG size})${5:}",
    "type": "function",
    "leftLabel": "STRPTR",
    "description": "Convert a network format address to presentation format.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "inet_pton(addressFamily, source, dest)",
    "snippet": "inet_pton(${1:LONG addrFmly}, ${2:STRPTR src}, ${3:APTR dest})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Convert a presentation format address to network format.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ipf_close(channel)",
    "snippet": "ipf_close(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_ioctl(channel, command, buffer)",
    "snippet": "ipf_ioctl(${1:LONG channel}, ${2:ULONG command}, ${3:APTR buffer})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_log_data_waiting(channel)",
    "snippet": "ipf_log_data_waiting(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_log_read(channel, buffer, len)",
    "snippet": "ipf_log_read(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_open(channel)",
    "snippet": "ipf_open(${1:LONG channel})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_set_interrupt_mask(channel, mask)",
    "snippet": "ipf_set_interrupt_mask(${1:LONG channel}, ${2:ULONG mask})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "ipf_set_notify_mask(channel, mask)",
    "snippet": "ipf_set_notify_mask(${1:LONG channel}, ${2:ULONG mask})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "",
    "descriptionMoreURL": ""
  },
  {
    "displayText": "mbuf_adj(mp, req_len)",
    "snippet": "mbuf_adj(${1:struct mbuf *mp}, ${2:LONG req_len})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Remove bytes from an mbuf chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_cat(m, n)",
    "snippet": "mbuf_cat(${1:struct mbuf *m}, ${2:struct mbuf *n})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Concatenate two mbuf chains.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_copyback(buffer, offset, length, data)",
    "snippet": "mbuf_copyback(${1:struct mbuf *buf}, ${2:LONG off}, ${3:LONG len}, ${4:APTR data})${5:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Copy data from a buffer back into an mbuf chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_copydata(buffer, offset, length, data)",
    "snippet": "mbuf_copydata(${1:struct mbuf *buf}, ${2:LONG off}, ${3:LONG len}, ${4:APTR data})${5:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Copy data from an mbuf chain into a buffer.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_copym(buffer, offset, length)",
    "snippet": "mbuf_copym(${1:struct mbuf *buf}, ${2:LONG off}, ${3:LONG len})${4:}",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Make a copy of an mbuf chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_free(buffer)",
    "snippet": "mbuf_free(${1:struct mbuf *buf})${2:}",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Free a single mbuf and return a pointer to the next mbuf in the chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_freem(buffer)",
    "snippet": "mbuf_freem(${1:struct mbuf *buf})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Free all mbufs in a chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_get()",
    "snippet": "mbuf_get()",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Allocate memory for an mbuf and initialize it.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_gethdr()",
    "snippet": "mbuf_gethdr()",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Allocate memory for a single mbuf and initialize it as a packet header.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_prepend(buffer, length)",
    "snippet": "mbuf_prepend(${1:struct mbuf *buf}, ${2:LONG len})${3:}",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Allocate new mbuf to be prepended to chain.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "mbuf_pullup(buffer, length)",
    "snippet": "mbuf_pullup(${1:struct mbuf *m}, ${2:LONG len})${3:}",
    "type": "function",
    "leftLabel": "struct mbuf*",
    "description": "Rearrange an mbuf chain so that len bytes are contiguous and in the data area of an mbuf.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ObtainDomainNameServerList()",
    "snippet": "ObtainDomainNameServerList()",
    "type": "function",
    "leftLabel": "struct List*",
    "description": "Obtain the local in-memory list of domain name server addresses used by the resolver.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ObtainInterfaceList()",
    "snippet": "ObtainInterfaceList()",
    "type": "function",
    "leftLabel": "struct List*",
    "description": "Obtain a list of available interfaces.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ObtainRoadshowData(access)",
    "snippet": "ObtainRoadshowData(${1:LONG access})${2:}",
    "type": "function",
    "leftLabel": "struct List *",
    "description": "Access internal Roadshow configuration data.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ObtainServerSocket()",
    "snippet": "ObtainServerSocket()",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Claim the socket associated with the current Process' Internet server connection.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ProcessIsServer(pr)",
    "snippet": "ProcessIsServer(${1:struct Process *pr})${2:}",
    "type": "function",
    "leftLabel": "BOOL",
    "description": "Find out if a Process is an Internet server.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "QueryInterfaceTagList(interface_name, tags)",
    "snippet": "QueryInterfaceTagList(${1:STRPTR interface_name}, ${2:struct TagItem *tags})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Obtain information on an interface and the associated SANA-II device driver.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "QueryInterfaceTags(interface_name, ...)",
    "snippet": "QueryInterfaceTags(${1:STRPTR interface_name}, ${2:...})${3:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Obtain information on an interface and the associated SANA-II device driver. (varargs)",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ReleaseDomainNameServerList(list)",
    "snippet": "ReleaseDomainNameServerList(${1:struct List *list})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Release a list of local domain server addresses as returned by ObtainDomainNameServerList().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ReleaseInterfaceList(list)",
    "snippet": "ReleaseInterfaceList(${1:struct List *list})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Release a list of available interfaces, as returned by ObtainInterfaceList().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "ReleaseRoadshowData(list)",
    "snippet": "ReleaseRoadshowData(${1:struct List *list})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Release access to internal Roadshow.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "RemoveDomainNameServer(address)",
    "snippet": "RemoveDomainNameServer(${1:STRPTR address})${2:}",
    "type": "function",
    "leftLabel": "LONG",
    "description": "Remove a domain name server address from the local resolver database.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "RemoveInterface(name, force)",
    "snippet": "RemoveInterface(${1:STRPTR name}, ${2:BOOL force})${3:}",
    "type": "function",
    "leftLabel": "BOOL",
    "description": "Pull a network interface out of circulation.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "RemoveNetMonitorHook(hook)",
    "snippet": "RemoveNetMonitorHook(${1:struct Hook *hook})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Remove a network monitoring callback hook previously installed with AddNetMonitorHookTagList().",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SetDefaultDomainName(name)",
    "snippet": "SetDefaultDomainName(${1:STRPTR name})${2:}",
    "type": "function",
    "leftLabel": "VOID",
    "description": "Configure the domain for host names which lack a domain name.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FD_SET(bit, fdSet)",
    "snippet": "FD_SET(${1:ULONG bit}, ${2:fd_set *fdSet})${3:}",
    "type": "macro",
    "leftLabel": "",
    "description": "Set a bit in a fdSet bit mask.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FD_CLR(bit, fdSet)",
    "snippet": "FD_CLR(${1:ULONG bit}, ${2:fd_set *fdSet})${3:}",
    "type": "macro",
    "leftLabel": "",
    "description": "Clear a bit in a fdSet bit mask.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FD_ISSET(bit, fdSet)",
    "snippet": "FD_ISSET(${1:ULONG bit}, ${2:fd_set *fdSet})${3:}",
    "type": "macro",
    "leftLabel": "",
    "description": "Check a bit in a fdSet bit mask.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FD_COPY(src, dest)",
    "snippet": "FD_COPY(${1:fd_set *src}, ${2:fd_set *dest})${3:}",
    "type": "macro",
    "leftLabel": "",
    "description": "Copy a fdSet.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "FD_ZERO(fdSet)",
    "snippet": "FD_ZERO(${1:fd_set *fdSet})${2:}",
    "type": "macro",
    "leftLabel": "",
    "description": "Clear all bits in a fdSet.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTM_GETREF(socketBaseTagCode)",
    "snippet": "SBTM_GETREF(${1:code})${2:}",
    "type": "macro",
    "leftLabel": "tag",
    "description": "Constructs ti_Tag values for SocketBaseTags() to get by reference.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTM_GETVAL(socketBaseTagCode)",
    "snippet": "SBTM_GETVAL(${1:code})${2:}",
    "type": "macro",
    "leftLabel": "tag",
    "description": "Constructs ti_Tag values for SocketBaseTags() to get by value.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTM_SETREF(socketBaseTagCode)",
    "snippet": "SBTM_GETVAL(${1:code})${2:}",
    "type": "macro",
    "leftLabel": "tag",
    "description": "Constructs ti_Tag values for SocketBaseTags() to set by reference.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTM_SETVAL(socketBaseTagCode)",
    "snippet": "SBTM_GETVAL(${1:code})${2:}",
    "type": "macro",
    "leftLabel": "tag",
    "description": "Constructs ti_Tag values for SocketBaseTags() to get by value.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTC_ERRNOPTR(size)",
    "snippet": "SBTC_ERRNOPTR(${1:size})${2:}",
    "type": "macro",
    "leftLabel": "baseTag",
    "description": "Constructs a base tag for SocketBaseTags() ERRNOPTR tag for the given size.",
    "descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
  },
  {
    "displayText": "SBTC_SIG_ADDRESS_CHANGE_MASK",
    "snippet": "SBTC_SIG_ADDRESS_CHANGE_MASK",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_BREAKMASK",
    "snippet": "SBTC_BREAKMASK",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_CAN_SHARE_LIBRARY_BASES",
    "snippet": "SBTC_CAN_SHARE_LIBRARY_BASES",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_DTABLESIZE",
    "snippet": "SBTC_DTABLESIZE",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_ERRNO",
    "snippet": "SBTC_ERRNO",
    "type": "tag",
    "leftLabel": "LONG"
  },
  {
    "displayText": "SBTC_ERRNOBYTEPTR",
    "snippet": "SBTC_ERRNOBYTEPTR",
    "type": "tag",
    "leftLabel": "APTR"
  },
  {
    "displayText": "SBTC_ERRNOWORDPTR",
    "snippet": "SBTC_ERRNOWORDPTR",
    "type": "tag",
    "leftLabel": "APTR"
  },
  {
    "displayText": "SBTC_ERRNOLONGPTR",
    "snippet": "SBTC_ERRNOLONGPTR",
    "type": "tag",
    "leftLabel": "APTR"
  },
  {
    "displayText": "SBTC_ERRNOSTRPTR",
    "snippet": "SBTC_ERRNOSTRPTR",
    "type": "tag",
    "leftLabel": "STRPTR"
  },
  {
    "displayText": "SBTC_ERROR_HOOK",
    "snippet": "SBTC_ERROR_HOOK",
    "type": "tag",
    "leftLabel": "struct Hook *"
  },
  {
    "displayText": "SBTC_GET_BYTES_RECEIVED",
    "snippet": "SBTC_GET_BYTES_RECEIVED",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_GET_BYTES_SENT",
    "snippet": "SBTC_GET_BYTES_SENT",
    "type": "tag",
    "leftLabel": "ULONG *"
  },
  {
    "displayText": "SBTC_HAVE_ADDRESS_CONVERSION_API",
    "snippet": "SBTC_HAVE_ADDRESS_CONVERSION_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_DNS_API",
    "snippet": "SBTC_HAVE_DNS_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_INTERFACE_API",
    "snippet": "SBTC_HAVE_INTERFACE_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_KERNEL_MEMORY_API",
    "snippet": "SBTC_HAVE_KERNEL_MEMORY_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_LOCAL_DATABASE_API",
    "snippet": "SBTC_HAVE_LOCAL_DATABASE_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_MONITORING_API",
    "snippet": "SBTC_HAVE_MONITORING_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_ROADSHOWDATA_API",
    "snippet": "SBTC_HAVE_ROADSHOWDATA_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_ROUTING_API",
    "snippet": "SBTC_HAVE_ROUTING_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_SERVER_API",
    "snippet": "SBTC_HAVE_SERVER_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HAVE_STATUS_API",
    "snippet": "SBTC_HAVE_STATUS_API",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_HERRNO",
    "snippet": "SBTC_HERRNO",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_HERRNOSTRPTR",
    "snippet": "SBTC_HERRNOSTRPTR",
    "type": "tag",
    "leftLabel": "STRPTR"
  },
  {
    "displayText": "SBTC_ICMP_MASK_REPLY",
    "snippet": "SBTC_ICMP_MASK_REPLY",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_ICMP_PROCESS_ECHO",
    "snippet": "SBTC_ICMP_PROCESS_ECHO",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_ICMP_PROCESS_TSTAMP",
    "snippet": "SBTC_ICMP_PROCESS_TSTAMP",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_ICMP_SEND_REDIRECTS",
    "snippet": "SBTC_ICMP_SEND_REDIRECTS",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_IDN_DEFAULT_CHARACTER_SET",
    "snippet": "SBTC_IDN_DEFAULT_CHARACTER_SET",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_IPF_API_VERSION",
    "snippet": "SBTC_IPF_API_VERSION",
    "type": "tag",
    "leftLabel": "ULONG *"
  },
  {
    "displayText": "SBTC_IP_FILTER_HOOK",
    "snippet": "SBTC_IP_FILTER_HOOK",
    "type": "tag",
    "leftLabel": "struct Hook *"
  },
  {
    "displayText": "SBTC_IP_FORWARDING",
    "snippet": "SBTC_IP_FORWARDING",
    "type": "tag",
    "leftLabel": "BOOL"
  },
  {
    "displayText": "SBTC_IP_DEFAULT_TTL",
    "snippet": "SBTC_IP_DEFAULT_TTL",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_LOGFACILITY",
    "snippet": "SBTC_LOGFACILITY",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_LOG_FILE_NAME",
    "snippet": "SBTC_LOG_FILE_NAME",
    "type": "tag",
    "leftLabel": "STRPTR"
  },
  {
    "displayText": "SBTC_LOG_HOOK",
    "snippet": "SBTC_LOG_HOOK",
    "type": "tag",
    "leftLabel": "struct Hook *"
  },
  {
    "displayText": "SBTC_LOGMASK",
    "snippet": "SBTC_LOGMASK",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_LOGSTAT",
    "snippet": "SBTC_LOGSTAT",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_LOGTAGPTR",
    "snippet": "SBTC_LOGTAGPTR",
    "type": "tag",
    "leftLabel": "STRPTR"
  },
  {
    "displayText": "SBTC_NUM_PACKET_FILTER_CHANNELS",
    "snippet": "SBTC_NUM_PACKET_FILTER_CHANNELS",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_RELEASESTRPTR",
    "snippet": "SBTC_RELEASESTRPTR",
    "type": "tag",
    "leftLabel": "STRPTR"
  },
  {
    "displayText": "SBTC_SIGEVENTMASK",
    "snippet": "SBTC_SIGEVENTMASK",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_SYSTEM_STATUS",
    "snippet": "SBTC_SYSTEM_STATUS",
    "type": "tag",
    "leftLabel": "ULONG"
  },
  {
    "displayText": "SBTC_UDP_CHECKSUM",
    "snippet": "SBTC_UDP_CHECKSUM",
    "type": "tag",
    "leftLabel": "BOOL"
  }
