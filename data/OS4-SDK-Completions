	{
		"displayText": "AbortInterfaceConfig(message)",
		"snippet": "AbortInterfaceConfig(${1:struct AddressAllocationMessage *message})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Attempt to abort an IP address allocation process currently in progress.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "AddCmdPathNode(pathNode, lock, where)",
		"snippet": "AddCmdPathNode(${1:struct PathNode *pn}, ${2:BPTR lock}, ${3:LONG where})${4:}",
		"type": "function",
		"leftLabel": "struct PathNode*",
		"description": "Add another entry to a shell search path. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AddDates(to, from)",
		"snippet": "AddDates(${1:struct DateStamp *to}, ${2:const struct DateStamp *from})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add a DateStamp to another one, yielding a sum of two time values. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AddDomainNameServer(address)",
		"snippet": "AddDomainNameServer(${1:STRPTR address})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add another domain name server address to the local resolver database.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "AddInterface(library, interface)",
		"snippet": "AddInterface(${1:struct Library *library}, ${2:struct Interface *interface})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Add an interface to a library. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "AddInterfaceTagList(interface_name, device_name, unit, tags)",
		"snippet": "AddInterfaceTagList(${1:STRPTR interface_name}, ${2:STRPTR device_name}, ${3:LONG unit}, ${4:struct TagItem *tags})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Make a new interface available for network access.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "AddInterfaceTags(interface_name, device_name, unit, ...)",
		"snippet": "AddInterfaceTags(${1:STRPTR interface_name}, ${2:STRPTR device_name}, ${3:LONG unit}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Make a new interface available for network access. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AddNetMonitorHookTagList(type, hook, tags)",
		"snippet": "AddNetMonitorHookTagList(${1:LONG type}, ${2:struct Hook *hook}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add a network monitoring callback hook.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "AddNetMonitorHookTags(type, hook, ...)",
		"snippet": "AddNetMonitorHookTags(${1:LONG type}, ${2:struct Hook *hook}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add a network monitoring callback hook. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AddResetCallback(resetCallback)",
		"snippet": "AddResetCallback(${1:struct Interrupt *resetCallback})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Add a reset handler to the system. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "AddressToSection(ElfHandle, Address)",
		"snippet": "AddressToSection(${1:Elf32_Handle ElfHandle}, ${2:APTR Address})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Map an address to a loaded section.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "AddRouteTagList(tags)",
		"snippet": "AddRouteTagList(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add entries to the networking routing tables.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "AddRouteTags(...)",
		"snippet": "AddRouteTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Add entries to the networking routing tables. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AddSegListTail(bseglist_head, bseg_new)",
		"snippet": "AddSegListTail(${1:BPTR bseglist_head}, ${2:BPTR bseg_new})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Low level routine to link up a seglist. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AddSegmentTagList(name, type, tags)",
		"snippet": "AddSegmentTagList(${1:CONST_STRPTR name}, ${2:LONG type}, ${3:const struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Adds a resident segment to the Dos resident list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AddTaskTags(task, initialPC, finalPC, ...)",
		"snippet": "AddTaskTags(${1:struct Task *task}, ${2:CONST_APTR initialPC}, ${3:CONST_APTR finalPC}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a task to the system. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AddTrackable(usingTask, object, destFunc)",
		"snippet": "AddTrackable(${1:struct Task *usingTask}, ${2:APTR object}, ${3:struct Hook *destFunc})${4:}",
		"type": "function",
		"leftLabel": "struct Trackable*",
		"description": "Add a trackable resource to a task. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "AIN_CreateContext(api_version, tags)",
		"snippet": "AIN_CreateContext(${1:ULONG api_version}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Create an AmigaInput Context.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_DeleteContext(ctx)",
		"snippet": "AIN_DeleteContext(${1:APTR ctx})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Delete an AmigaInput Context again.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_EnumDevices(ctx, enumfunc, user_data)",
		"snippet": "AIN_EnumDevices(${1:APTR ctx}, ${2:APTR enumfunc}, ${3:APTR user_data})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Enumerate the Devices for a certain AmigaInput Context, using a specific Enumeration Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_FreeEvent(ctx, event)",
		"snippet": "AIN_FreeEvent(${1:APTR ctx}, ${2:AIN_InputEvent *event})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Frees an AmigaInput Event.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_FreeRequest(ctx, result)",
		"snippet": "AIN_FreeRequest(${1:APTR ctx}, ${2:struct _AIN_RequesterResult *result})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AIN_GetError(ctx)",
		"snippet": "AIN_GetError(${1:APTR ctx})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get the error code, in case an error happened.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_GetErrorString(error_code)",
		"snippet": "AIN_GetErrorString(${1:ULONG error_code})${2:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Translates an AmigaInput Error Code into a String.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_GetEvent(ctx)",
		"snippet": "AIN_GetEvent(${1:APTR ctx})${2:}",
		"type": "function",
		"leftLabel": "AIN_InputEvent*",
		"description": "Gets the next event in the Event queue (if any)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_ObtainDevice(ctx, device_id)",
		"snippet": "AIN_ObtainDevice(${1:APTR ctx}, ${2:AIN_DeviceID device_id})${3:}",
		"type": "function",
		"leftLabel": "AIN_DeviceHandle*",
		"description": "Obtains a specific Device for usage of AmigaInput.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_Query(ctx, device_id, qParameter, qArg, result, result_length)",
		"snippet": "AIN_Query(${1:APTR ctx}, ${2:AIN_DeviceID device_id}, ${3:ULONG qParameter}, ${4:ULONG qArg}, ${5:APTR result}, ${6:ULONG result_length})${7:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Queries information about a specific AmigaInput Device.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_ReadDevice(ctx, handle, data)",
		"snippet": "AIN_ReadDevice(${1:APTR ctx}, ${2:AIN_DeviceHandle *handle}, ${3:APTR *data})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Reads out the Data on your AmigaInput Devices.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_ReleaseDevice(ctx, handle)",
		"snippet": "AIN_ReleaseDevice(${1:APTR ctx}, ${2:AIN_DeviceHandle *handle})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a Device used by AmigaInput.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_RequestDevice(ctx, tags)",
		"snippet": "AIN_RequestDevice(${1:APTR ctx}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "struct _AIN_RequesterResult*",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "AIN_Set(ctx, tags)",
		"snippet": "AIN_Set(${1:APTR ctx}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Configures a AmigaInput Context.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AIN_SetDeviceParameter(ctx, handle, dParameter, dArg)",
		"snippet": "AIN_SetDeviceParameter(${1:APTR ctx}, ${2:AIN_DeviceHandle *handle}, ${3:ULONG dParameter}, ${4:ULONG dArg})${5:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Sets a specific parameter for an AmigaInput Device.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/AmigaInput.doc.txt"
	},
	{
		"displayText": "AllocateCmdPathList(first_lock)",
		"snippet": "AllocateCmdPathList(${1:BPTR first_lock})${2:}",
		"type": "function",
		"leftLabel": "struct PathNode*",
		"description": "Allocate a new shell search path. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AllocClipRect(layerInfo)",
		"snippet": "AllocClipRect(${1:struct Layer_Info *li})${2:}",
		"type": "function",
		"leftLabel": "struct ClipRect*",
		"description": "Build a ClipRect.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "AllocPartitionNode(...)",
		"snippet": "AllocPartitionNode(${1:...})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Allocate a partition node. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "AllocPartitionNodeA(last)",
		"snippet": "AllocPartitionNodeA(${1:struct TagItem *last})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Allocate a partition node.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "AllocSegList(entry, data, datalen, identkey)",
		"snippet": "AllocSegList(${1:CONST_APTR entry}, ${2:CONST_APTR data}, ${3:ULONG datalen}, ${4:ULONG identkey})${5:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Low level routine to allocate a pseudo seglist. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AllocSysObject(type, tags)",
		"snippet": "AllocSysObject(${1:ULONG type}, ${2:const struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Create a system object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "AllocSysObjectTags(type, ...)",
		"snippet": "AllocSysObjectTags(${1:ULONG type}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Create a system object. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "AllocVecPooled(poolHeader, size)",
		"snippet": "AllocVecPooled(${1:APTR poolHeader}, ${2:ULONG size})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Allocate memory with the pool manager and track size. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ASPrintf(fmt, ...)",
		"snippet": "ASPrintf(${1:CONST_STRPTR fmt}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Formatted output conversion; results are stored in dynamically allocated buffer. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "AssignAddToList(name, lock, endpos)",
		"snippet": "AssignAddToList(${1:CONST_STRPTR name}, ${2:BPTR lock}, ${3:LONG endpos})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Adds a multi-assignment entry to an existing assignment, at a specific point in the list. (V51.43)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "AttachPixie(pixie, pixieField)",
		"snippet": "AttachPixie(${1:Pixie pixie}, ${2:PixieField pixief})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "BeginDeserialization(info)",
		"snippet": "BeginDeserialization(${1:struct ALPOGetProcInfo *info})${2:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Begins the deserialization of a prefs objects XML data stream.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "BeginInterfaceConfig(message)",
		"snippet": "BeginInterfaceConfig(${1:struct AddressAllocationMessage *message})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Attempt to allocate an IP address for an interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "BitMapInstanceControl(bitmapinstance, ...)",
		"snippet": "BitMapInstanceControl(${1:APTR bitmapinstance}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set and get bitmap instance attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "BitMapInstanceControlA(bitmapinstance, taglist)",
		"snippet": "BitMapInstanceControlA(${1:APTR bitmapinstance}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set and get bitmap instance attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "bpf_close(channel)",
		"snippet": "bpf_close(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Close a packet filter channel.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_data_waiting(channel)",
		"snippet": "bpf_data_waiting(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query whether there is data waiting to be read with bpf_read()",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_ioctl(channel, command, buffer)",
		"snippet": "bpf_ioctl(${1:LONG channel}, ${2:ULONG command}, ${3:APTR buffer})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Control packet filter parameters.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_open(channel)",
		"snippet": "bpf_open(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Open a packet filter channel.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_read(channel, buffer, len)",
		"snippet": "bpf_read(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Read data from a packet filter channel.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_set_interrupt_mask(channel, signal_mask)",
		"snippet": "bpf_set_interrupt_mask(${1:LONG channel}, ${2:ULONG signal_mask})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Choose which signals will cause the bpf_read() call to be interrupted.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_set_notify_mask(channel, signal_mask)",
		"snippet": "bpf_set_notify_mask(${1:LONG channel}, ${2:ULONG signal_mask})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Choose the signals to send when new packet data is available for reading.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "bpf_write(channel, buffer, len)",
		"snippet": "bpf_write(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Write data to an interface associated with a packet filter channel.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "BrokerCommand(name, id)",
		"snippet": "BrokerCommand(${1:CONST_STRPTR name}, ${2:int32 id})${3:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Issue a commodity broker command. (V53.4)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/commodities.doc.txt"
	},
	{
		"displayText": "BumpRevisionLength(newname, oldname, maxlength)",
		"snippet": "BumpRevisionLength(${1:STRPTR newname}, ${2:CONST_STRPTR oldname}, ${3:uint32 maxlength})${4:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Reformat a name for a second copy. (V51.14)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/icon.doc.txt"
	},
	{
		"displayText": "CalculateSegmentChecksum(segment)",
		"snippet": "CalculateSegmentChecksum(${1:BPTR segment})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Calculate a 32 bit checksum over a complete segment list. (V50).",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "CapturePattern(pattern, string, caseSens, cap)",
		"snippet": "CapturePattern(${1:CONST_STRPTR pat}, ${2:CONST_STRPTR str}, ${3:LONG casesen}, ${4:struct CapturedExpression ** cap})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Checks for a pattern match with a string and remember which sections would match. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ChangeFilePosition(file, position, offset)",
		"snippet": "ChangeFilePosition(${1:BPTR file}, ${2:int64 position}, ${3:int32 offset})${4:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Change the current cursor position for reading and writing. (V51.64)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ChangeFileSize(fileHandle, pos, mode)",
		"snippet": "ChangeFileSize(${1:BPTR fh}, ${2:int64 pos}, ${3:int32 mode})${4:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Change the size of a file. (V51.64)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ChangeLayerShape(layer, region, hook)",
		"snippet": "ChangeLayerShape(${1:struct Layer *layer}, ${2:struct Region *region}, ${3:struct Hook *hook})${4:}",
		"type": "function",
		"leftLabel": "struct Region*",
		"description": "Change shape of a layer. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "ChangeRouteTagList(tags)",
		"snippet": "ChangeRouteTagList(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ChangeRouteTags(...)",
		"snippet": "ChangeRouteTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CleanupPixieField(pixieField)",
		"snippet": "CleanupPixieField(${1:PixieField pixief})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ClearMem(destination, size)",
		"snippet": "ClearMem(${1:APTR destination}, ${2:uint32 size})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Set memory area to all zeros. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "CloseClass(class)",
		"snippet": "CloseClass(${1:struct ClassLibrary *cl})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Close a class previously opened by OpenClass(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "CloseElf(ElfHandle, TagList)",
		"snippet": "CloseElf(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *TagList})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Close an elf handle after use. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "CloseElfTags(ElfHandle, ...)",
		"snippet": "CloseElfTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Close an elf handle after use. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "CloseGUIPlugin(plugin)",
		"snippet": "CloseGUIPlugin(${1:struct GUIPlugin *plugin})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CloseKeyMapHandle(handle)",
		"snippet": "CloseKeyMapHandle(${1:APTR handle})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Close a keymap handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "CloseOutlineFont(olf, list)",
		"snippet": "CloseOutlineFont(${1:struct OutlineFont *olf}, ${2:struct List *list})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a pointer to an outline font. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "CloseSocket(sock)",
		"snippet": "CloseSocket(${1:LONG sock})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Delete a socket descriptor.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ConfigureInterfaceTagList(interface_name, tags)",
		"snippet": "ConfigureInterfaceTagList(${1:STRPTR interface_name}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Configure an interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ConfigureInterfaceTags(interface_name, ...)",
		"snippet": "ConfigureInterfaceTags(${1:STRPTR interface_name}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Configure an interface. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CopyBrokerList(blist)",
		"snippet": "CopyBrokerList(${1:struct List *blist})${2:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Copy the current commodity broker list. (V53.4)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/commodities.doc.txt"
	},
	{
		"displayText": "CopyDataSegment(ElfHandle, baseOffset)",
		"snippet": "CopyDataSegment(${1:Elf32_Handle ElfHandle}, ${2:uint32 *baseOffset})${3:}",
		"type": "function",
		"leftLabel": "void*",
		"description": "Copy the data segment and relocate it. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "CopyDTMethods(methods, include, exclude)",
		"snippet": "CopyDTMethods(${1:ULONG *methods}, ${2:ULONG *include}, ${3:ULONG *exclude})${4:}",
		"type": "function",
		"leftLabel": "ULONG*",
		"description": "Clone and modify DTA_Methods array. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "CopyDTTriggerMethods(methods, include, exclude)",
		"snippet": "CopyDTTriggerMethods(${1:struct DTMethod *methods}, ${2:struct DTMethod *include}, ${3:struct DTMethod *exclude})${4:}",
		"type": "function",
		"leftLabel": "struct DTMethod*",
		"description": "Clone and modify DTA_TriggerMethods array. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "CopyStringBSTRToC(bsrc, dest, size)",
		"snippet": "CopyStringBSTRToC(${1:BSTR bsrc}, ${2:STRPTR dest}, ${3:ULONG size})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Copy BCPL format string to 'C' format string. (V51.61)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "CopyStringCToBSTR(source, bdest, size)",
		"snippet": "CopyStringCToBSTR(${1:CONST_STRPTR src}, ${2:BSTR bdest}, ${3:ULONG size})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Copy 'C' format string to NUL terminated BCPL format string. (V51.61)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "CreateAddrAllocMessage(version, protocol, interface_name, result_ptr, ...)",
		"snippet": "CreateAddrAllocMessage(${1:LONG version}, ${2:LONG protocol}, ${3:STRPTR interface_name}, ${4:struct AddressAllocationMessage ** result_ptr}, ${5:...})${6:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Create a message to be used with the BeginInterfaceConfig(). (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "CreateAddrAllocMessageA(version, protocol, interface_name, result_ptr, tags)",
		"snippet": "CreateAddrAllocMessageA(${1:LONG version}, ${2:LONG protocol}, ${3:STRPTR interface_name}, ${4:struct AddressAllocationMessage ** result_ptr}, ${5:struct TagItem *tags})${6:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Create a message to be used with the BeginInterfaceConfig().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "CreateBackFillHook(...)",
		"snippet": "CreateBackFillHook(${1:...})${2:}",
		"type": "function",
		"leftLabel": "struct Hook*",
		"description": "Create a backfill hook from a pattern or bitmap. (varargs) (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "CreateBackFillHookA(taglist)",
		"snippet": "CreateBackFillHookA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "struct Hook*",
		"description": "Create a backfill hook from a pattern or bitmap. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "CreateDirTree(name)",
		"snippet": "CreateDirTree(${1:CONST_STRPTR name})${2:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Create a multiple directory tree. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "CreateLayer(layerInfo, ...)",
		"snippet": "CreateLayer(${1:struct Layer_Info *li}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct Layer*",
		"description": "Create a new layer using a taglist. (varargs) (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "CreateLayerA(layerInfo, taglist)",
		"snippet": "CreateLayerA(${1:struct Layer_Info *li}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct Layer*",
		"description": "Create a new layer using a taglist. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "CreateLibrary(taglist)",
		"snippet": "CreateLibrary(${1:const struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "struct Library*",
		"description": "Construct a library. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "CreateLibraryTags(dataSize, ...)",
		"snippet": "CreateLibraryTags(${1:ULONG dataSize}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct Library*",
		"description": "Construct a library. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CreateRexxHostPort(base_name)",
		"snippet": "CreateRexxHostPort(${1:STRPTR base_name})${2:}",
		"type": "function",
		"leftLabel": "struct MsgPort*",
		"description": "Attempt to create a unique ARexx host MsgPort. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "CreateSkipList(hook, max_levels)",
		"snippet": "CreateSkipList(${1:struct Hook *hook}, ${2:LONG max_levels})${3:}",
		"type": "function",
		"leftLabel": "struct SkipList*",
		"description": "Allocate a skip list data structure. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "CreateSplayTree(compareHook)",
		"snippet": "CreateSplayTree(${1:struct Hook *compareHook})${2:}",
		"type": "function",
		"leftLabel": "struct SplayTree*",
		"description": "Allocate a splay tree data structure. (V53.2)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "CreateTaskTags(name, pri, initPC, stackSize, ...)",
		"snippet": "CreateTaskTags(${1:CONST_STRPTR name}, ${2:LONG pri}, ${3:CONST_APTR initPC}, ${4:ULONG stackSize}, ${5:...})${6:}",
		"type": "function",
		"leftLabel": "struct Task*",
		"description": "Create task with given name, priority, stacksize. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW3FloppyAvail()",
		"snippet": "CW3FloppyAvail()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW3GameportAvail()",
		"snippet": "CW3GameportAvail()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW3KeyboardAvail()",
		"snippet": "CW3KeyboardAvail()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW3Present()",
		"snippet": "CW3Present()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW3SIDAvail()",
		"snippet": "CW3SIDAvail()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CW4Present()",
		"snippet": "CW4Present()",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "CxReserved0()",
		"snippet": "CxReserved0()",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DateStampToSeconds(dateStamp)",
		"snippet": "DateStampToSeconds(${1:const struct DateStamp *ds})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Convert a DateStamp into \"Amiga Time\". (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DebugPrintF(format, ...)",
		"snippet": "DebugPrintF(${1:CONST_STRPTR fmt}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Output a string to the debug console. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "DeleteAddrAllocMessage(addressAllocationMessage)",
		"snippet": "DeleteAddrAllocMessage(${1:struct AddressAllocationMessage *aam})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release the memory allocation for an address allocation message created by CreateAddrAllocMessageA().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "DeleteBackFillHook(hook)",
		"snippet": "DeleteBackFillHook(${1:struct Hook *hook})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Delete a backfill hook. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "DeleteInterface(interface)",
		"snippet": "DeleteInterface(${1:struct Interface *interface})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Delete an interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "DeleteLibrary(library)",
		"snippet": "DeleteLibrary(${1:struct Library *lib})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free up library resources.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "DeleteRexxHostPort(port)",
		"snippet": "DeleteRexxHostPort(${1:struct MsgPort *port})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Remove an ARexx host MsgPort. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "DeleteRouteTagList(tags)",
		"snippet": "DeleteRouteTagList(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Remove entries from the networking routing tables.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "DeleteRouteTags(...)",
		"snippet": "DeleteRouteTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Remove entries from the networking routing tables. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DeleteSkipList(skipList)",
		"snippet": "DeleteSkipList(${1:struct SkipList *skipList})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free a skip list and all its nodes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "DeleteSplayTree(splayTree)",
		"snippet": "DeleteSplayTree(${1:struct SplayTree *splayTree})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free a splay tree and all its nodes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "DeleteTrackable(trackable)",
		"snippet": "DeleteTrackable(${1:struct Trackable *trackable})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free up object and trackable structure. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "DetachPixie(pixie)",
		"snippet": "DetachPixie(${1:Pixie pixie})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DevNameFromFH(fileHandle, buffer, buflen, mode)",
		"snippet": "DevNameFromFH(${1:BPTR fh}, ${2:STRPTR buffer}, ${3:LONG buflen}, ${4:LONG mode})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Returns the device with or without path, associated with a filehandle. (V51.32)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DevNameFromLock(lock, buffer, buflen, mode)",
		"snippet": "DevNameFromLock(${1:BPTR lock}, ${2:STRPTR buffer}, ${3:LONG buflen}, ${4:LONG mode})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Returns the device with or without path, associated with a lock. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DictGetBoolForKey(dict, key, defBool)",
		"snippet": "DictGetBoolForKey(${1:PrefsObject *dict}, ${2:CONST_STRPTR key}, ${3:BOOL defBool})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Get a bool value for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DictGetIntegerForKey(dict, key, defInt)",
		"snippet": "DictGetIntegerForKey(${1:PrefsObject *dict}, ${2:CONST_STRPTR key}, ${3:int32 defInt})${4:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Get an integer value for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DictGetObjectForKey(dict, key)",
		"snippet": "DictGetObjectForKey(${1:PrefsObject *dict}, ${2:CONST_STRPTR key})${3:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "Get an object value for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DictGetOptionForKey(dict, key, optionsTable, defaultOption)",
		"snippet": "DictGetOptionForKey(${1:PrefsObject *dict}, ${2:CONST_STRPTR key}, ${3:CONST_STRPTR *optionsTable}, ${4:int32 defaultOption})${5:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Get a option table number for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DictGetStringForKey(dict, key, defStr)",
		"snippet": "DictGetStringForKey(${1:PrefsObject *dict}, ${2:CONST_STRPTR key}, ${3:CONST_STRPTR defStr})${4:}",
		"type": "function",
		"leftLabel": "CONST_STRPTR",
		"description": "Get a PrefsString for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DictSetObjectForKey(dict, object, key)",
		"snippet": "DictSetObjectForKey(${1:PrefsObject *dict}, ${2:PrefsObject *obj}, ${3:CONST_STRPTR key})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set a PrefsObject for a key.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "DirectionVector(degrees)",
		"snippet": "DirectionVector(${1:ULONG degrees})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Convert degrees to a X:Y ratio. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "DisableTemplate(rastPort, left, top, width, height, template_ptr, offx, template_type, bytesperrow, backtype, drawInfo)",
		"snippet": "DisableTemplate(${1:struct RastPort *rp}, ${2:LONG left}, ${3:LONG top}, ${4:LONG width}, ${5:LONG height}, ${6:APTR template_ptr}, ${7:LONG offx}, ${8:ULONG template_type}, ${9:ULONG bytesperrow}, ${10:ULONG backtype}, ${11:struct DrawInfo *dri})${12:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Blit a shape in \"disabled\" style. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "DismountDevice(name, flags, reserved)",
		"snippet": "DismountDevice(${1:CONST_STRPTR name}, ${2:ULONG flags}, ${3:APTR reserved})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Dismounts a file system or handler. (V51.30)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DisposeClipVector(vector)",
		"snippet": "DisposeClipVector(${1:STRPTR vector})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a vector obtained by ReadClipVector.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/textclip.doc.txt"
	},
	{
		"displayText": "DisposePixie(pixie)",
		"snippet": "DisposePixie(${1:Pixie pixie})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DockyGet(msgType, msgData)",
		"snippet": "DockyGet(${1:uint32 msgType}, ${2:uint32 *msgData})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Used by AmiDock to gather various informations from dockies.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/docky.doc.txt"
	},
	{
		"displayText": "DockyProcess(turnCount, msgType, msgData, anotherTurn)",
		"snippet": "DockyProcess(${1:uint32 turnCount}, ${2:uint32 *msgType}, ${3:uint32 *msgData}, ${4:BOOL *anotherTurn})${5:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Description.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/docky.doc.txt"
	},
	{
		"displayText": "DockySet(msgType, msgData)",
		"snippet": "DockySet(${1:uint32 msgType}, ${2:uint32 msgData})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Used by AmiDock to send messages to the docky with various informations and parameters.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/docky.doc.txt"
	},
	{
		"displayText": "DoRender(object, gadgetInfo, flags)",
		"snippet": "DoRender(${1:Object *o}, ${2:struct GadgetInfo *gi}, ${3:uint32 flags})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Redraw a BOOPSI gadget. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "DosControl(tags)",
		"snippet": "DosControl(${1:const struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Set or obtain global DOS control values. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DosControlTags(...)",
		"snippet": "DosControlTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Set or obtain global DOS control values. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "DoScrollHook(scrollhook, scrollmode)",
		"snippet": "DoScrollHook(${1:struct ScrollHook *scrollhook}, ${2:LONG scrollmode})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Optimized real-time scrolling framework. (V50).",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "DrawGradient(rastPort, left, top, width, height, domain, reserved, gradientspec, drawInfo)",
		"snippet": "DrawGradient(${1:struct RastPort *rp}, ${2:LONG left}, ${3:LONG top}, ${4:LONG width}, ${5:LONG height}, ${6:struct IBox *domain}, ${7:ULONG reserved}, ${8:struct GradientSpec *gradientspec}, ${9:struct DrawInfo *dri})${10:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Draw a gradient effect into a RastPort. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "DrawPixieField(pixieField, x, y, ...)",
		"snippet": "DrawPixieField(${1:PixieField pixief}, ${2:LONG x}, ${3:LONG y}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DrawPixieFieldA(pixieField, x, y, tags)",
		"snippet": "DrawPixieFieldA(${1:PixieField pixief}, ${2:LONG x}, ${3:LONG y}, ${4:CONST struct TagItem *tags})${5:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DrawSysImage(rastPort, left, top, width, height, which, backtype, state, drawInfo, ...)",
		"snippet": "DrawSysImage(${1:struct RastPort *rp}, ${2:LONG left}, ${3:LONG top}, ${4:LONG width}, ${5:LONG height}, ${6:ULONG which}, ${7:ULONG backtype}, ${8:ULONG state}, ${9:struct DrawInfo *dri}, ${10:...})${11:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DrawSysImageA(rastPort, left, top, width, height, which, backtype, state, drawInfo, taglist)",
		"snippet": "DrawSysImageA(${1:struct RastPort *rp}, ${2:LONG left}, ${3:LONG top}, ${4:LONG width}, ${5:LONG height}, ${6:ULONG which}, ${7:ULONG backtype}, ${8:ULONG state}, ${9:struct DrawInfo *dri}, ${10:struct TagItem *taglist})${11:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "DropInterface(interface)",
		"snippet": "DropInterface(${1:struct Interface *interface})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Release an interface from use. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "Dup2Socket(old_socket, new_socket)",
		"snippet": "Dup2Socket(${1:LONG old_socket}, ${2:LONG new_socket})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Duplicate a socket descriptor.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "DupFileHandle(fileHandle)",
		"snippet": "DupFileHandle(${1:BPTR fh})${2:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Creates a duplicate of an open filehandle. (V51.32)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ECloseEngine(EEngine)",
		"snippet": "ECloseEngine(${1:struct EGlyphEngine *EEngine})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release an engine handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "ElfLoadSeg(ElfHandle, taglist)",
		"snippet": "ElfLoadSeg(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "Elf32_Error",
		"description": "Make a runnable image from an ELF file.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "ElfLoadSegTags(ElfHandle, ...)",
		"snippet": "ElfLoadSegTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "Elf32_Error",
		"description": "Make a runnable image from an ELF file. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "EmbossDisableRect(rastPort, minx, miny, maxx, maxy, backtype, contrast, drawInfo)",
		"snippet": "EmbossDisableRect(${1:struct RastPort *rp}, ${2:int32 minx}, ${3:int32 miny}, ${4:int32 maxx}, ${5:int32 maxy}, ${6:uint32 backtype}, ${7:uint32 contrast}, ${8:struct DrawInfo *dri})${9:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Draw a rectangle in \"disabled\" style. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "EmbossDisableText(rastPort, text, len, backtype, contrast, drawInfo)",
		"snippet": "EmbossDisableText(${1:struct RastPort *rp}, ${2:CONST_STRPTR text}, ${3:uint32 len}, ${4:uint32 backtype}, ${5:uint32 contrast}, ${6:struct DrawInfo *dri})${7:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Write text in \"disabled\" style. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "Emulate(InitPC, tagList)",
		"snippet": "Emulate(${1:CONST_APTR InitPC}, ${2:const struct TagItem *tagList})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Run classic 68k Code through emulation. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "EmulateTags(InitPC, ...)",
		"snippet": "EmulateTags(${1:CONST_APTR InitPC}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "EndDMA(startAddr, blockSize, flags)",
		"snippet": "EndDMA(${1:CONST_APTR startAddr}, ${2:ULONG blockSize}, ${3:ULONG flags})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "End hardware DMA access. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "EndScreenNotify(request)",
		"snippet": "EndScreenNotify(${1:APTR request})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "End notification request. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "EObtainInfo(EEngine, ...)",
		"snippet": "EObtainInfo(${1:struct EGlyphEngine *EEngine}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Inquire tagged font and/or glyph metrics. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "EObtainInfoA(EEngine, taglist)",
		"snippet": "EObtainInfoA(${1:struct EGlyphEngine *EEngine}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Inquire tagged font and/or glyph metrics. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "EOpenEngine(EEngine)",
		"snippet": "EOpenEngine(${1:struct EGlyphEngine *EEngine})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Acquire engine handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "EReleaseInfo(EEngine, ...)",
		"snippet": "EReleaseInfo(${1:struct EGlyphEngine *EEngine}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Release data obtained with EObtainInfoA. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "EReleaseInfoA(EEngine, taglist)",
		"snippet": "EReleaseInfoA(${1:struct EGlyphEngine *EEngine}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Release data obtained with EObtainInfoA. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "ErrorOutput()",
		"snippet": "ErrorOutput()",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Identify the programs error output file handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ESetInfo(EEngine, ...)",
		"snippet": "ESetInfo(${1:struct EGlyphEngine *EEngine}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set font and/or glyph metrics. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "ESetInfoA(EEngine, taglist)",
		"snippet": "ESetInfoA(${1:struct EGlyphEngine *EEngine}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set font and/or glyph metrics. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "FileSystemAttr(tags)",
		"snippet": "FileSystemAttr(${1:const struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Get and Set attributes for a filesystem. (V51.46)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FileSystemAttrTags(...)",
		"snippet": "FileSystemAttrTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Get and Set attributes for a filesystem. (varargs) (V51.46)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FILLER_GetClass()",
		"snippet": "FILLER_GetClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the filler class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/filler_ic.doc.txt"
	},
	{
		"displayText": "FindApplication(...)",
		"snippet": "FindApplication(${1:...})${2:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Find an application. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "FindApplicationA(tags)",
		"snippet": "FindApplicationA(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Find an application.",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "FindIName(start, name)",
		"snippet": "FindIName(${1:struct List *start}, ${2:CONST_STRPTR name})${3:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Find a list node by name case insensitive. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "FindMenuKey(menu, code)",
		"snippet": "FindMenuKey(${1:struct Menu *menu}, ${2:LONG code})${3:}",
		"type": "function",
		"leftLabel": "UWORD",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "FindMethod(methods, searchmethodid)",
		"snippet": "FindMethod(${1:ULONG *methods}, ${2:ULONG searchmethodid})${3:}",
		"type": "function",
		"leftLabel": "ULONG*",
		"description": "Find a specified method in methods array. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "FindNameNC(list, name)",
		"snippet": "FindNameNC(${1:struct List *list}, ${2:CONST_STRPTR name})${3:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Find a list node with a name; the case of the name is ignored. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "FindSegmentStackSize(segment)",
		"snippet": "FindSegmentStackSize(${1:BPTR segment})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Try to find the minimum stack size a program is to be launched with, as encoded in the program's.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FindSkipNode(skipList, key)",
		"snippet": "FindSkipNode(${1:const struct SkipList *skipList}, ${2:APTR key})${3:}",
		"type": "function",
		"leftLabel": "struct SkipNode*",
		"description": "Search for a key in a skip list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "FindSplayNode(splayTree, key)",
		"snippet": "FindSplayNode(${1:const struct SplayTree *splayTree}, ${2:APTR key})${3:}",
		"type": "function",
		"leftLabel": "struct SplayNode*",
		"description": "Search for a key in a splay tree. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "FindTrackable(usingTask, object)",
		"snippet": "FindTrackable(${1:struct Task *usingTask}, ${2:APTR object})${3:}",
		"type": "function",
		"leftLabel": "struct Trackable*",
		"description": "Find the trackable structure for an object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "FindTrackedAddress(address, hook)",
		"snippet": "FindTrackedAddress(${1:CONST_APTR address}, ${2:struct Hook *hook})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Look up an address, find out whether it was tracked and provide the information associated with it. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FindTriggerMethod(dtm, command, method)",
		"snippet": "FindTriggerMethod(${1:struct DTMethod *dtm}, ${2:CONST_STRPTR command}, ${3:ULONG method})${4:}",
		"type": "function",
		"leftLabel": "struct DTMethod*",
		"description": "Find a specified trigger method in trigger methods array. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "FixDateStamp(dateStamp)",
		"snippet": "FixDateStamp(${1:struct DateStamp *ds})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Examine a DateStamp and fix its contents so that the ds_Tick and ds_Minute structure members are in valid bounds. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FOpenFromLock(lock, bufsize)",
		"snippet": "FOpenFromLock(${1:BPTR lock}, ${2:LONG bufsize})${3:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Opens a buffered file stream you have a lock on.(V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FormatString32(locale, fmtTemplate, dataStream, putCharFunc)",
		"snippet": "FormatString32(${1:struct Locale *locale}, ${2:CONST_STRPTR fmtTemplate}, ${3:APTR dataStream}, ${4:struct Hook *putCharFunc})${5:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "FReadLine(fileHandle, frld)",
		"snippet": "FReadLine(${1:BPTR fh}, ${2:struct FReadLineData *frld})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Reads a line or until EOF with dynamic buffering. (V51.47)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FreeApplicationList(list)",
		"snippet": "FreeApplicationList(${1:struct MinList *list})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Frees a list of applications which was generated by GetApplicationList().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "FreeBrokerList(list)",
		"snippet": "FreeBrokerList(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Frees the commodity broker list. (V53.4)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/commodities.doc.txt"
	},
	{
		"displayText": "FreeClipRect(layerInfo, cr)",
		"snippet": "FreeClipRect(${1:struct Layer_Info *li}, ${2:struct ClipRect *cr})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a ClipRect built by AllocClipRect().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "FreeCmdPathList(pathNode)",
		"snippet": "FreeCmdPathList(${1:struct PathNode *pn})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Free a shell search path list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FreeDataSegmentCopy(ElfHandle, SegmentCopy)",
		"snippet": "FreeDataSegmentCopy(${1:Elf32_Handle ElfHandle}, ${2:void *SegmentCopy})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Release memory of a copied data segment. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "FreeDiskFileSystemData(fsd)",
		"snippet": "FreeDiskFileSystemData(${1:struct FileSystemData *fsd})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release information describing a file system mounted on top of a disk driver.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "FreeDTMethods(methods)",
		"snippet": "FreeDTMethods(${1:APTR methods})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Free methods array obtained by CopyDT#?Methods. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "FreePartitionNode(last)",
		"snippet": "FreePartitionNode(${1:struct Node *last})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free a partition node.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "FreeRexxMsg(message)",
		"snippet": "FreeRexxMsg(${1:struct RexxMsg *message})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a RexxMsg and all its arguments. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "FreeRouteInfo(buf)",
		"snippet": "FreeRouteInfo(${1:struct rt_msghdr *buf})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release information obtained by GetRouteInfo().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "FreeSysObject(type, object)",
		"snippet": "FreeSysObject(${1:ULONG type}, ${2:APTR object})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Delete an object created with AllocSysObject. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "FreeTTextAttr(tta)",
		"snippet": "FreeTTextAttr(${1:struct TTextAttr *tta})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a TTextAttr from ObtainTTextAttr() (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "FreeVecPooled(poolHeader, memory)",
		"snippet": "FreeVecPooled(${1:APTR poolHeader}, ${2:APTR memory})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free pooled memory allocated with AllocVecPooled. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GadgetBox(gadget, domain, domaintype, flags, box)",
		"snippet": "GadgetBox(${1:struct Gadget *gadget}, ${2:APTR domain}, ${3:ULONG domaintype}, ${4:ULONG flags}, ${5:APTR box})${6:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Return the absolute position and size of a gadget. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetAppLibAttrs(...)",
		"snippet": "GetAppLibAttrs(${1:...})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Get global application.library attributes. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "GetAppLibAttrsA(tags)",
		"snippet": "GetAppLibAttrsA(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Get global application.library attributes.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "GetApplicationAttrs(appID, ...)",
		"snippet": "GetApplicationAttrs(${1:uint32 appID}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Get application attributes. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "GetApplicationAttrsA(appID, tags)",
		"snippet": "GetApplicationAttrsA(${1:uint32 appID}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Get application attributes.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "GetApplicationList()",
		"snippet": "GetApplicationList()",
		"type": "function",
		"leftLabel": "struct MinList*",
		"description": "Obtain a list of all currently registered applications.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "GetBackFillHookAttrs(hook, ...)",
		"snippet": "GetBackFillHookAttrs(${1:struct Hook *h}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Query backfill hook attributes. (varargs) (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "GetBackFillHookAttrsA(hook, tags)",
		"snippet": "GetBackFillHookAttrsA(${1:struct Hook *h}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Query backfill hook attributes. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "GETCOLOR_GetClass()",
		"snippet": "GETCOLOR_GetClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the getcolor class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/getcolor_gc.doc.txt"
	},
	{
		"displayText": "GetCPUInfo(TagList)",
		"snippet": "GetCPUInfo(${1:const struct TagItem *TagList})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about the current CPU. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetCPUInfoTags(...)",
		"snippet": "GetCPUInfoTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about the current CPU. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetCurrentDir()",
		"snippet": "GetCurrentDir()",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Return the lock of the current directory. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetDeviceProcFlags(name, odp, flags)",
		"snippet": "GetDeviceProcFlags(${1:CONST_STRPTR name}, ${2:struct DevProc *odp}, ${3:ULONG flags})${4:}",
		"type": "function",
		"leftLabel": "struct DevProc*",
		"description": "Low level function to find a DOS handler. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetDiskFileSystemData(name)",
		"snippet": "GetDiskFileSystemData(${1:CONST_STRPTR name})${2:}",
		"type": "function",
		"leftLabel": "struct FileSystemData*",
		"description": "Obtain information describing a file system mounted on top of a disk driver. (V50).",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetDMAList(startAddr, blockSize, flags, dmaList)",
		"snippet": "GetDMAList(${1:CONST_APTR startAddr}, ${2:ULONG blockSize}, ${3:ULONG flags}, ${4:struct DMAEntry *dmaList})${5:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Retrieve information for DMA transfer. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetElfAttrs(ElfHandle, taglist)",
		"snippet": "GetElfAttrs(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get Attributes from an ELF handle.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "GetElfAttrsTags(ElfHandle, ...)",
		"snippet": "GetElfAttrsTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get Attributes from an ELF handle. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetElfString(ElfHandle, SectionIndex, StringIndex)",
		"snippet": "GetElfString(${1:Elf32_Handle ElfHandle}, ${2:UWORD SectionIndex}, ${3:UWORD StringIndex})${4:}",
		"type": "function",
		"leftLabel": "CONST_STRPTR",
		"description": "Read a string from a string table section.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "GetEntryData()",
		"snippet": "GetEntryData()",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain the entry data set by CreateNewProc() (V51.73)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetExitData()",
		"snippet": "GetExitData()",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain the exit data set by CreateNewProc(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetFilePosition(fileHandle)",
		"snippet": "GetFilePosition(${1:BPTR fh})${2:}",
		"type": "function",
		"leftLabel": "int64",
		"description": "Return the current file cursor position. (51.64)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetFileSize(fileHandle)",
		"snippet": "GetFileSize(${1:BPTR fh})${2:}",
		"type": "function",
		"leftLabel": "int64",
		"description": "Obtain the size of a file. (V51.62)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetFirstSkipNode(skipList)",
		"snippet": "GetFirstSkipNode(${1:const struct SkipList *skipList})${2:}",
		"type": "function",
		"leftLabel": "struct SkipNode*",
		"description": "Obtain a pointer to the first node of a skip list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "GetGUIAttrs(reserved, drawinfo, ...)",
		"snippet": "GetGUIAttrs(${1:APTR reserved}, ${2:struct DrawInfo *drawinfo}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Inquire the value of Intuition GUI attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetGUIAttrsA(reserved, drawinfo, taglist)",
		"snippet": "GetGUIAttrsA(${1:APTR reserved}, ${2:struct DrawInfo *drawinfo}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Inquire the value of Intuition GUI attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetHalfPens(drawinfo, basepen, halfshineptr, halfshadowptr)",
		"snippet": "GetHalfPens(${1:struct DrawInfo *drawinfo}, ${2:ULONG basepen}, ${3:UWORD *halfshineptr}, ${4:UWORD *halfshadowptr})${5:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Retrieve the half-intensity bright and dark variants of a background-like DrawInfo pen. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetHead(list)",
		"snippet": "GetHead(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Obtain the first Node of a List. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetInterface(name, version, taglist)",
		"snippet": "GetInterface(${1:STRPTR name}, ${2:uint32 version}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "struct Interface*",
		"description": "Retrieve an interface from a library. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetInterfaceTags(library, name, version, ...)",
		"snippet": "GetInterfaceTags(${1:struct Library *library}, ${2:CONST_STRPTR name}, ${3:ULONG version}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "struct Interface*",
		"description": "Retrieve an interface from a library. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetMachineInfo(tagList)",
		"snippet": "GetMachineInfo(${1:const struct TagItem *tagList})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get information about the current hardware. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/expansion.doc.txt"
	},
	{
		"displayText": "GetMachineInfoTags(...)",
		"snippet": "GetMachineInfoTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get information about the current hardware. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/expansion.doc.txt"
	},
	{
		"displayText": "GetMarkedBlock(sgw)",
		"snippet": "GetMarkedBlock(${1:struct SGWork *sgw})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetNetworkStatistics(type, version, destination, size)",
		"snippet": "GetNetworkStatistics(${1:LONG type}, ${2:LONG version}, ${3:APTR destination}, ${4:LONG size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain network usage statistics.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "GetNextSkipNode(skipList, node)",
		"snippet": "GetNextSkipNode(${1:const struct SkipList *skipList}, ${2:const struct SkipNode *node})${3:}",
		"type": "function",
		"leftLabel": "struct SkipNode*",
		"description": "Obtain a pointer to the next following node in a skip list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "GetPartitionNodeAttrs(par1, ...)",
		"snippet": "GetPartitionNodeAttrs(${1:struct Node *par1}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get attributes of a partition node. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "GetPartitionNodeAttrsA(par1, last)",
		"snippet": "GetPartitionNodeAttrsA(${1:struct Node *par1}, ${2:struct TagItem *last})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get attributes of a partition node.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "GetPixieAttrs(pixie, ...)",
		"snippet": "GetPixieAttrs(${1:Pixie pixie}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetPixieAttrsA(pixie, tags)",
		"snippet": "GetPixieAttrsA(${1:Pixie pixie}, ${2:CONST struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetPred(node)",
		"snippet": "GetPred(${1:struct Node *node})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Obtain the previous node of a list. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetProcMsgPort(proc)",
		"snippet": "GetProcMsgPort(${1:const struct Process *proc})${2:}",
		"type": "function",
		"leftLabel": "struct MsgPort*",
		"description": "Obtain a pointer to a process' message port. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetProcSegList(proc, flags)",
		"snippet": "GetProcSegList(${1:const struct Process *proc}, ${2:ULONG flags})${3:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Obtain a seglist for a process. (V51.88)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetRenderDomain(rastPort, domain)",
		"snippet": "GetRenderDomain(${1:struct RastPort *rp}, ${2:struct Rectangle *domain})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get the logical container for GUI rendering. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetRexxVarFromMsg(name, buffer, message)",
		"snippet": "GetRexxVarFromMsg(${1:STRPTR name}, ${2:STRPTR buffer}, ${3:struct RexxMsg *message})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain the value of an ARexx variable. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "GetRouteInfo(address_family, flags)",
		"snippet": "GetRouteInfo(${1:LONG address_family}, ${2:LONG flags})${3:}",
		"type": "function",
		"leftLabel": "struct rt_msghdr*",
		"description": "Obtain information on the routing tables.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "GetScreenAttr(scr, attribute, data, size)",
		"snippet": "GetScreenAttr(${1:struct Screen *scr}, ${2:ULONG attr}, ${3:APTR data}, ${4:ULONG size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query a screen attribute. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetScreenAttrs(scr, ...)",
		"snippet": "GetScreenAttrs(${1:struct Screen *scr}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query multiple screen attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetScreenAttrsA(scr, taglist)",
		"snippet": "GetScreenAttrsA(${1:struct Screen *scr}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query multiple screen attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetSection(ElfHandle, TagList)",
		"snippet": "GetSection(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *TagList})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Get/Load a section from an ELF handle.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "GetSectionHeader(ElfHandle, TagList)",
		"snippet": "GetSectionHeader(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *TagList})${3:}",
		"type": "function",
		"leftLabel": "Elf32_Shdr*",
		"description": "Get a section header from an ELF handle.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "GetSectionHeaderTags(ElfHandle, ...)",
		"snippet": "GetSectionHeaderTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "Elf32_Shdr*",
		"description": "Get a section header from an ELF handle. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetSectionTags(ElfHandle, ...)",
		"snippet": "GetSectionTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Get/Load a section from an ELF handle. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "GetSegListInfo(seglist, tags)",
		"snippet": "GetSegListInfo(${1:BPTR seglist}, ${2:const struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain information about a SegList. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetSegListInfoTags(seglist, ...)",
		"snippet": "GetSegListInfoTags(${1:BPTR seglist}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain information about a SegList. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "GetSocketEvents(event_ptr)",
		"snippet": "GetSocketEvents(${1:ULONG *event_ptr})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Get the next asynchronous event triggered by socket I/O [AmiTCP V4]",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "GetSucc(node)",
		"snippet": "GetSucc(${1:struct Node *node})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Obtain the next node of a list. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetTail(list)",
		"snippet": "GetTail(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "struct Node*",
		"description": "Obtain the last Node of a List. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "GetUpTime(dest)",
		"snippet": "GetUpTime(${1:struct TimeVal *dest})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Find out how much time has passed since the system started up. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/timer.doc.txt"
	},
	{
		"displayText": "GetWindowAttr(window, attribute, data, size)",
		"snippet": "GetWindowAttr(${1:struct Window *win}, ${2:ULONG attr}, ${3:APTR data}, ${4:ULONG size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query a window attribute. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetWindowAttrs(window, ...)",
		"snippet": "GetWindowAttrs(${1:struct Window *win}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query multiple window attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "GetWindowAttrsA(window, taglist)",
		"snippet": "GetWindowAttrsA(${1:struct Window *win}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Query multiple window attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "HexToLong(string, value_ptr)",
		"snippet": "HexToLong(${1:CONST_STRPTR string}, ${2:ULONG *value_ptr})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Hexadecimal ascii string to unsigned int32 value. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "HideLayer(layer)",
		"snippet": "HideLayer(${1:struct Layer *layer})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Make layer invisible. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "HideWindow(window)",
		"snippet": "HideWindow(${1:struct Window *window})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Make visible window invisible. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IceColdReboot()",
		"snippet": "IceColdReboot()",
		"type": "function",
		"leftLabel": "void",
		"description": "Reboot to power-on state.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ICoerceMethod(class, object, ...)",
		"snippet": "ICoerceMethod(${1:Class *cl}, ${2:Object *obj}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on coerced object. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ICoerceMethodA(class, object, msg)",
		"snippet": "ICoerceMethodA(${1:Class *cl}, ${2:Object *obj}, ${3:Msg msg})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on coerced object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IDoMethod(object, ...)",
		"snippet": "IDoMethod(${1:Object *obj}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on object. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IDoMethodA(object, msg)",
		"snippet": "IDoMethodA(${1:Object *obj}, ${2:Msg msg})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IDoSuperMethod(class, object, ...)",
		"snippet": "IDoSuperMethod(${1:Class *cl}, ${2:Object *obj}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on object coerced to superclass. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IDoSuperMethodA(class, object, msg)",
		"snippet": "IDoSuperMethodA(${1:Class *cl}, ${2:Object *obj}, ${3:Msg msg})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Perform method on object coerced to superclass. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "InByte(Port)",
		"snippet": "InByte(${1:ULONG Port})${2:}",
		"type": "function",
		"leftLabel": "UBYTE",
		"description": "Read from I/O Space.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/expansion.doc.txt"
	},
	{
		"displayText": "Inet_LnaOf(address)",
		"snippet": "Inet_LnaOf(${1:in_addr_t in})${2:}",
		"type": "function",
		"leftLabel": "in_addr_t",
		"description": "Internet address manipulation.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "Inet_MakeAddr(net, host)",
		"snippet": "Inet_MakeAddr(${1:in_addr_t net}, ${2:in_addr_t host})${3:}",
		"type": "function",
		"leftLabel": "in_addr_t",
		"description": "Internet address manipulation.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "Inet_NetOf(address)",
		"snippet": "Inet_NetOf(${1:in_addr_t in})${2:}",
		"type": "function",
		"leftLabel": "in_addr_t",
		"description": "Internet address manipulation.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "Inet_NtoA(ip)",
		"snippet": "Inet_NtoA(${1:in_addr_t ip})${2:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Internet address manipulation.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "inet_ntop(addressFamily, source, dest, size)",
		"snippet": "inet_ntop(${1:LONG addrFmly}, ${2:APTR src}, ${3:STRPTR dest}, ${4:LONG size})${5:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Convert a network format address to presentation format.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "inet_pton(addressFamily, source, dest)",
		"snippet": "inet_pton(${1:LONG addrFmly}, ${2:STRPTR src}, ${3:APTR dest})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Convert a presentation format address to network format.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "InitData(initTab, memory, size)",
		"snippet": "InitData(${1:CONST_APTR initTab}, ${2:APTR memory}, ${3:ULONG size})${4:}",
		"type": "function",
		"leftLabel": "DEPRECATED void",
		"description": "Initialize a data structure. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "InsertSkipNode(skipList, key, dataSize)",
		"snippet": "InsertSkipNode(${1:struct SkipList *skipList}, ${2:APTR key}, ${3:ULONG dataSize})${4:}",
		"type": "function",
		"leftLabel": "struct SkipNode*",
		"description": "Insert a new key into a skip list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "InsertSplayNode(splayTree, key, date_size)",
		"snippet": "InsertSplayNode(${1:struct SplayTree *splayTree}, ${2:APTR key}, ${3:ULONG date_size})${4:}",
		"type": "function",
		"leftLabel": "struct SplayNode*",
		"description": "Insert a new key into a splay tree. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "IntuiTextExtent(rastPort, itext, textent)",
		"snippet": "IntuiTextExtent(${1:struct RastPort *rp}, ${2:struct IntuiText *itext}, ${3:struct TextExtent *textent})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Return the extent of a chain of IntuiTexts. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IntuitionControl(object, ...)",
		"snippet": "IntuitionControl(${1:APTR object}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "IntuitionControlA(object, taglist)",
		"snippet": "IntuitionControlA(${1:APTR object}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "In_CanForward(address)",
		"snippet": "In_CanForward(${1:in_addr_t address})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Determine whether an IP address is in a reserved set of addresses that may not be forwarded, or whether datagrams to that destination may be forwarded.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "In_LocalAddr(address)",
		"snippet": "In_LocalAddr(${1:in_addr_t address})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Check if an internet address is for a 'local' host.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "IoctlSocket(sock, req, argp)",
		"snippet": "IoctlSocket(${1:LONG sock}, ${2:ULONG req}, ${3:APTR argp})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Control socket parameters.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ipf_close(channel)",
		"snippet": "ipf_close(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_ioctl(channel, command, buffer)",
		"snippet": "ipf_ioctl(${1:LONG channel}, ${2:ULONG command}, ${3:APTR buffer})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_log_data_waiting(channel)",
		"snippet": "ipf_log_data_waiting(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_log_read(channel, buffer, len)",
		"snippet": "ipf_log_read(${1:LONG channel}, ${2:APTR buffer}, ${3:LONG len})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_open(channel)",
		"snippet": "ipf_open(${1:LONG channel})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_set_interrupt_mask(channel, mask)",
		"snippet": "ipf_set_interrupt_mask(${1:LONG channel}, ${2:ULONG mask})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ipf_set_notify_mask(channel, mask)",
		"snippet": "ipf_set_notify_mask(${1:LONG channel}, ${2:ULONG mask})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "IsBlank(locale, character)",
		"snippet": "IsBlank(${1:struct Locale *locale}, ${2:uint32 character})${3:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ISetSuperAttrs(class, object, ...)",
		"snippet": "ISetSuperAttrs(${1:Class *cl}, ${2:Object *obj}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Invoke OM_SET method on superclass. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ISetSuperAttrsA(class, object, taglist)",
		"snippet": "ISetSuperAttrsA(${1:Class *cl}, ${2:Object *obj}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Invoke OM_SET method on superclass. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "IsNative(code)",
		"snippet": "IsNative(${1:CONST_APTR code})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Check if a code pointer is native. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ItemPoolAlloc(itemPool)",
		"snippet": "ItemPoolAlloc(${1:APTR itemPool})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Allocate an item from a pool. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ItemPoolControl(itemPool, tagList)",
		"snippet": "ItemPoolControl(${1:APTR itemPool}, ${2:const struct TagItem *tagList})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Control attributes in an item pool. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ItemPoolControlTags(itemPool, ...)",
		"snippet": "ItemPoolControlTags(${1:APTR itemPool}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Control attributes in an item pool. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ItemPoolFlush(itemPool)",
		"snippet": "ItemPoolFlush(${1:APTR itemPool})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Delete all items in an item pool. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ItemPoolFree(itemPool, item)",
		"snippet": "ItemPoolFree(${1:APTR itemPool}, ${2:APTR item})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Return an item to its item pool. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "ItemPoolGC(itemPool)",
		"snippet": "ItemPoolGC(${1:APTR itemPool})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Perform garbage collection. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "LaunchRexxScript(script_name, host_port, extension, input_handle, output_handle)",
		"snippet": "LaunchRexxScript(${1:STRPTR script_name}, ${2:struct MsgPort *host_port}, ${3:STRPTR extension}, ${4:BPTR input_handle}, ${5:BPTR output_handle})${6:}",
		"type": "function",
		"leftLabel": "struct RexxMsg*",
		"description": "Attempt to make the Rexx resident process execute an ARexx program/script. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "LayerOccluded(layer)",
		"snippet": "LayerOccluded(${1:struct Layer *layer})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Is layer occluded by any other layer? (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "Locale_DateToStr(datetime)",
		"snippet": "Locale_DateToStr(${1:struct DateTime *datetime})${2:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "Locale_StrToDate(datetime)",
		"snippet": "Locale_StrToDate(${1:struct DateTime *datetime})${2:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "LockApplicationIcon(appID)",
		"snippet": "LockApplicationIcon(${1:uint32 appID})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Attempts to lock a application icon.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "LockGUIPrefs(reserved)",
		"snippet": "LockGUIPrefs(${1:ULONG reserved})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "LockMem(baseAddress, size)",
		"snippet": "LockMem(${1:APTR baseAddress}, ${2:ULONG size})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Lock an address range into physical memory. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "LockScreen(screen, micros)",
		"snippet": "LockScreen(${1:struct Screen *screen}, ${2:ULONG micros})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Do an Intuition friendly LockLayers(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "LockScreenGI(gadgetInfo, micros)",
		"snippet": "LockScreenGI(${1:struct GadgetInfo *gi}, ${2:ULONG micros})${3:}",
		"type": "function",
		"leftLabel": "struct RastPort*",
		"description": "Do an Intuition friendly LockLayers(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "LockScreenList()",
		"snippet": "LockScreenList()",
		"type": "function",
		"leftLabel": "struct Screen*",
		"description": "Prevent changes to the screen list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "MakeInterface(library, taglist)",
		"snippet": "MakeInterface(${1:struct Library *library}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct Interface*",
		"description": "Construct an Interface. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "MakeInterfaceTags(library, ...)",
		"snippet": "MakeInterfaceTags(${1:struct Library *library}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct Interface*",
		"description": "Construct an Interface. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "mbuf_adj(mp, req_len)",
		"snippet": "mbuf_adj(${1:struct mbuf *mp}, ${2:LONG req_len})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Remove bytes from an mbuf chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_cat(m, n)",
		"snippet": "mbuf_cat(${1:struct mbuf *m}, ${2:struct mbuf *n})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Concatenate two mbuf chains.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_copyback(m, off, len, cp)",
		"snippet": "mbuf_copyback(${1:struct mbuf *m}, ${2:LONG off}, ${3:LONG len}, ${4:APTR cp})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Copy data from a buffer back into an mbuf chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_copydata(m, off, len, cp)",
		"snippet": "mbuf_copydata(${1:struct mbuf *m}, ${2:LONG off}, ${3:LONG len}, ${4:APTR cp})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Copy data from an mbuf chain into a buffer.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_copym(m, off, len)",
		"snippet": "mbuf_copym(${1:struct mbuf *m}, ${2:LONG off}, ${3:LONG len})${4:}",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Make a copy of an mbuf chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_free(m)",
		"snippet": "mbuf_free(${1:struct mbuf *m})${2:}",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Free a single mbuf and return a pointer to the next mbuf in the chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_freem(m)",
		"snippet": "mbuf_freem(${1:struct mbuf *m})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Free all mbufs in a chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_get()",
		"snippet": "mbuf_get()",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Allocate memory for an mbuf and initialize it.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_gethdr()",
		"snippet": "mbuf_gethdr()",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Allocate memory for a single mbuf and initialize it as a packet header.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_prepend(m, len)",
		"snippet": "mbuf_prepend(${1:struct mbuf *m}, ${2:LONG len})${3:}",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Allocate new mbuf to be prepended to chain.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "mbuf_pullup(m, len)",
		"snippet": "mbuf_pullup(${1:struct mbuf *m}, ${2:LONG len})${3:}",
		"type": "function",
		"leftLabel": "struct mbuf*",
		"description": "Rearrange an mbuf chain so that len bytes are contiguous and in the data area of an mbuf.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "MessageDigest_SHA_Final(shas)",
		"snippet": "MessageDigest_SHA_Final(${1:struct MessageDigest_SHA *shas})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Compute a condensed representation of a message or a data file using the Secure Hash Algorithm; final calculation of the digest. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "MessageDigest_SHA_Init(shas)",
		"snippet": "MessageDigest_SHA_Init(${1:struct MessageDigest_SHA *shas})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Compute a condensed representation of a message or a data file using the Secure Hash Algorithm; initialization of state data. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "MessageDigest_SHA_Update(shas, data, num_bytes)",
		"snippet": "MessageDigest_SHA_Update(${1:struct MessageDigest_SHA *shas}, ${2:APTR data}, ${3:LONG num_bytes})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Compute a condensed representation of a message or a data file using the Secure Hash Algorithm; updating the checksum. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "MicroDelay(microseconds)",
		"snippet": "MicroDelay(${1:ULONG microseconds})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Wait for a very short time. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/timer.doc.txt"
	},
	{
		"displayText": "MountDevice(name, type, tags)",
		"snippet": "MountDevice(${1:CONST_STRPTR name}, ${2:LONG type}, ${3:const struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Mount a file system device or handler. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "MountDeviceTags(name, type, ...)",
		"snippet": "MountDeviceTags(${1:CONST_STRPTR name}, ${2:LONG type}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Mount a file system device or handler. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "MoveList(destinationList, sourceList)",
		"snippet": "MoveList(${1:struct List *destinationList}, ${2:struct List *sourceList})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove all nodes from one list and append them to a different list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "MoveMem(source, destination, size)",
		"snippet": "MoveMem(${1:APTR source}, ${2:APTR destination}, ${3:uint32 size})${4:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Copy memory with possible overlap. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "NewBevelPrefs()",
		"snippet": "NewBevelPrefs()",
		"type": "function",
		"leftLabel": "void",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "NewPixie(...)",
		"snippet": "NewPixie(${1:...})${2:}",
		"type": "function",
		"leftLabel": "Pixie",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "NewPixieA(tags)",
		"snippet": "NewPixieA(${1:CONST struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "Pixie",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "NewWindowPrefs()",
		"snippet": "NewWindowPrefs()",
		"type": "function",
		"leftLabel": "void",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "NonBlockingModifyDosEntry(dl, mode, arg1, arg2)",
		"snippet": "NonBlockingModifyDosEntry(${1:struct DosList *dl}, ${2:LONG mode}, ${3:APTR arg1}, ${4:APTR arg2})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Modify a DosList node without blocking. (V51.29)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "NotifyDosListChange(process, signalnum, reserved)",
		"snippet": "NotifyDosListChange(${1:struct Process *process}, ${2:ULONG signalnum}, ${3:ULONG reserved})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Notify a process when the DosList changes. (V51.75)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "NotifyProcListChange(process, signalnum, reserved)",
		"snippet": "NotifyProcListChange(${1:struct Process *process}, ${2:ULONG signalnum}, ${3:ULONG reserved})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Notify a process when the process list changes. (V51.81)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "NotifyVar(name, hook, flags, userdata)",
		"snippet": "NotifyVar(${1:CONST_STRPTR name}, ${2:const struct Hook *hook}, ${3:LONG flags}, ${4:CONST_APTR userdata})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Notify when a global variable is modified. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ObtainBitMapInstance(bitmapsource, screen, ...)",
		"snippet": "ObtainBitMapInstance(${1:APTR bitmapsource}, ${2:struct Screen *screen}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Get a lock on a shared bitmap object. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ObtainBitMapInstanceA(bitmapsource, screen, taglist)",
		"snippet": "ObtainBitMapInstanceA(${1:APTR bitmapsource}, ${2:struct Screen *screen}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Get a lock on a shared bitmap object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ObtainBitMapSource(name, ...)",
		"snippet": "ObtainBitMapSource(${1:CONST_STRPTR name}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Load a picture as a sharable template. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ObtainBitMapSourceA(name, taglist)",
		"snippet": "ObtainBitMapSourceA(${1:CONST_STRPTR name}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Load a picture as a sharable template. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ObtainCharsetInfo(knownTag, knownValue, wantedTag)",
		"snippet": "ObtainCharsetInfo(${1:ULONG knownTag}, ${2:ULONG knownValue}, ${3:ULONG wantedTag})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Inquire charset information. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "ObtainDomainNameServerList()",
		"snippet": "ObtainDomainNameServerList()",
		"type": "function",
		"leftLabel": "struct List*",
		"description": "Obtain the local in-memory list of domain name server addresses used by the resolver.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ObtainEngine()",
		"snippet": "ObtainEngine()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ObtainIBackFill(drawInfo, element, state, flags)",
		"snippet": "ObtainIBackFill(${1:struct DrawInfo *dri}, ${2:ULONG element}, ${3:ULONG state}, ${4:ULONG flags})${5:}",
		"type": "function",
		"leftLabel": "struct Hook*",
		"description": "Lock and return an Intuition backfill hook. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ObtainInterfaceList()",
		"snippet": "ObtainInterfaceList()",
		"type": "function",
		"leftLabel": "struct List*",
		"description": "Obtain a list of available interfaces.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ObtainIPluginList(type, attrmask, applymask)",
		"snippet": "ObtainIPluginList(${1:ULONG type}, ${2:ULONG attrmask}, ${3:ULONG applymask})${4:}",
		"type": "function",
		"leftLabel": "struct List*",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ObtainKeyMapInfo(handle, ...)",
		"snippet": "ObtainKeyMapInfo(${1:APTR handle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Obtain info from a keymap handle. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ObtainKeyMapInfoA(handle, taglist)",
		"snippet": "ObtainKeyMapInfoA(${1:APTR handle}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Obtain info from a keymap handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ObtainRawKeyInfo(...)",
		"snippet": "ObtainRawKeyInfo(${1:...})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Obtain info about a rawkey. (varargs) (V51.7)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ObtainRawKeyInfoA(taglist)",
		"snippet": "ObtainRawKeyInfoA(${1:const struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Obtain info about a rawkey. (V51.7)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ObtainServerSocket()",
		"snippet": "ObtainServerSocket()",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Claim the socket associated with the current Process' Internet server connection.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ObtainSocket(id, domain, type, protocol)",
		"snippet": "ObtainSocket(${1:LONG id}, ${2:LONG domain}, ${3:LONG type}, ${4:LONG protocol})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Acquire a socket from the public list.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ObtainTTextAttr(textFont)",
		"snippet": "ObtainTTextAttr(${1:struct TextFont *textFont})${2:}",
		"type": "function",
		"leftLabel": "struct TTextAttr*",
		"description": "Obtain a TTextAttr from a given TextFont. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "OpenElf(taglist)",
		"snippet": "OpenElf(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "Elf32_Handle",
		"description": "Open an ELF file. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "OpenElfTags(...)",
		"snippet": "OpenElfTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "Elf32_Handle",
		"description": "Open an ELF file. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "OpenGUIPlugin(name, version, type, attrmask, applymask)",
		"snippet": "OpenGUIPlugin(${1:STRPTR name}, ${2:ULONG version}, ${3:ULONG type}, ${4:ULONG attrmask}, ${5:ULONG applymask})${6:}",
		"type": "function",
		"leftLabel": "struct GUIPlugin*",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "OpenKeyMapHandle(filename, ...)",
		"snippet": "OpenKeyMapHandle(${1:CONST_STRPTR filename}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Open a keymap handle. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "OpenKeyMapHandleA(filename, taglist)",
		"snippet": "OpenKeyMapHandleA(${1:CONST_STRPTR filename}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Open a keymap handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "OpenOutlineFont(name, list, flags)",
		"snippet": "OpenOutlineFont(${1:CONST_STRPTR name}, ${2:struct List *list}, ${3:ULONG flags})${4:}",
		"type": "function",
		"leftLabel": "struct OutlineFont*",
		"description": "Search, load, validate and relocate an .otag file, if requested open the font engine library, its main interface and a glyph engine. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "OutByte(port, value)",
		"snippet": "OutByte(${1:ULONG port}, ${2:UBYTE value})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Write to I/O Space.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/expansion.doc.txt"
	},
	{
		"displayText": "OwnerOfMem(Address)",
		"snippet": "OwnerOfMem(${1:CONST_APTR Address})${2:}",
		"type": "function",
		"leftLabel": "struct Task*",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ParseCapturePattern(pattern, dest, length, caseSense)",
		"snippet": "ParseCapturePattern(${1:CONST_STRPTR pat}, ${2:STRPTR dest}, ${3:LONG length}, ${4:LONG casesen})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Create a tokenized string for CapturePattern(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "PARTITION_GetClass()",
		"snippet": "PARTITION_GetClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the partition class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "POPUPMENU_FreeIDList(idlist)",
		"snippet": "POPUPMENU_FreeIDList(${1:APTR idlist})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Free an ID list.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_GetClass()",
		"snippet": "POPUPMENU_GetClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the popupmenu class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_GetItemClass()",
		"snippet": "POPUPMENU_GetItemClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the popupmenuitem class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_MakeIDList(...)",
		"snippet": "POPUPMENU_MakeIDList(${1:...})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Create list of ID's for exclusion/inclusion. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_MakeIDListA(tags)",
		"snippet": "POPUPMENU_MakeIDListA(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Create list of ID's for exclusion/inclusion.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_MakeMXList(...)",
		"snippet": "POPUPMENU_MakeMXList(${1:...})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Build list of ID numbers for mutual exclusion. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "POPUPMENU_MakeMXListA(ids)",
		"snippet": "POPUPMENU_MakeMXListA(${1:ULONG *ids})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Build list of ID numbers for mutual exclusion.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/popupmenu_cl.doc.txt"
	},
	{
		"displayText": "PrefsArray(object, error, ...)",
		"snippet": "PrefsArray(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects array object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsArrayA(object, error, tags)",
		"snippet": "PrefsArrayA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects array object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsBaseObject(object, error, ...)",
		"snippet": "PrefsBaseObject(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects base object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsBaseObjectA(object, error, tags)",
		"snippet": "PrefsBaseObjectA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects base object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsBinary(object, error, ...)",
		"snippet": "PrefsBinary(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects binary object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsBinaryA(object, error, tags)",
		"snippet": "PrefsBinaryA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects binary object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsDate(object, error, ...)",
		"snippet": "PrefsDate(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects date object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsDateA(object, error, tags)",
		"snippet": "PrefsDateA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects date object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsDictionary(object, error, ...)",
		"snippet": "PrefsDictionary(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects dictionary object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsDictionaryA(object, error, tags)",
		"snippet": "PrefsDictionaryA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects dictionary object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsNumber(object, error, ...)",
		"snippet": "PrefsNumber(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects number object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsNumberA(object, error, tags)",
		"snippet": "PrefsNumberA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects number object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsString(object, error, ...)",
		"snippet": "PrefsString(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects string object access function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrefsStringA(object, error, tags)",
		"snippet": "PrefsStringA(${1:PrefsObject *obj}, ${2:uint32 *error}, ${3:struct TagItem *tags})${4:}",
		"type": "function",
		"leftLabel": "PrefsObject*",
		"description": "PrefsObjects string object access function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "PrintEmbossedDisabledIText(rastPort, itext, left, top, backtype, contrast, drawInfo)",
		"snippet": "PrintEmbossedDisabledIText(${1:struct RastPort *rp}, ${2:struct IntuiText *itext}, ${3:LONG left}, ${4:LONG top}, ${5:ULONG backtype}, ${6:ULONG contrast}, ${7:struct DrawInfo *dri})${8:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Print an IntuiText in \"disabled\" style. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ProcessIsServer(pr)",
		"snippet": "ProcessIsServer(${1:struct Process *pr})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Find out if a Process is an Internet server.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ProcessScan(hook, userdata, reserved)",
		"snippet": "ProcessScan(${1:const struct Hook *hook}, ${2:CONST_APTR userdata}, ${3:ULONG reserved})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Low level routine to scan through the DOS process list. (V51.75)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "PutErrStr(str)",
		"snippet": "PutErrStr(${1:CONST_STRPTR str})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Writes a string to the default error stream. (V50) (buffered)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "QueryInterfaceTagList(interface_name, tags)",
		"snippet": "QueryInterfaceTagList(${1:STRPTR interface_name}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain information on an interface and the associated SANA-II device driver.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "QueryInterfaceTags(interface_name, ...)",
		"snippet": "QueryInterfaceTags(${1:STRPTR interface_name}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain information on an interface and the associated SANA-II device driver. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "Random(state)",
		"snippet": "Random(${1:struct RandomState *state})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Calculate a pseudo-random number. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "ReadClipVector(bufptr, sizptr)",
		"snippet": "ReadClipVector(${1:STRPTR *bufptr}, ${2:ULONG *sizptr})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Read a string vector from the clipboard device.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/textclip.doc.txt"
	},
	{
		"displayText": "ReadLineItem(buffer, maxchars, taglist)",
		"snippet": "ReadLineItem(${1:STRPTR buffer}, ${2:LONG maxchars}, ${3:const struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Reads a word or contents from an inputstream. (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ReadLineItemTags(buffer, maxchars, ...)",
		"snippet": "ReadLineItemTags(${1:STRPTR buffer}, ${2:LONG maxchars}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Reads a word or contents from an inputstream. (varargs) (V51)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ReadPrefs(dict, ...)",
		"snippet": "ReadPrefs(${1:PrefsObject *dict}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Read prefs (==a prefs dictionary) from a file. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "ReadPrefsA(dict, tags)",
		"snippet": "ReadPrefsA(${1:PrefsObject *dict}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Read prefs (==a prefs dictionary) from a file.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "ReallocVec(memBlock, newSize, flags)",
		"snippet": "ReallocVec(${1:APTR memBlock}, ${2:ULONG newSize}, ${3:ULONG flags})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Change the size of previously allocated memory. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "RefreshSetGadgetAttrs(gadget, window, req, ...)",
		"snippet": "RefreshSetGadgetAttrs(${1:struct Gadget *gadget}, ${2:struct Window *window}, ${3:struct Requester *req}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Specify attribute values for a BOOPSI gadget and refresh it. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "RefreshSetGadgetAttrsA(gadget, window, req, taglist)",
		"snippet": "RefreshSetGadgetAttrsA(${1:struct Gadget *gadget}, ${2:struct Window *window}, ${3:struct Requester *req}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Specify attribute values for a BOOPSI gadget and refresh it. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "RegisterApplication(appName, ...)",
		"snippet": "RegisterApplication(${1:CONST_STRPTR appName}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Register a application within the system. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "RegisterApplicationA(appName, tags)",
		"snippet": "RegisterApplicationA(${1:CONST_STRPTR appName}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Register a application within the system.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "ReleaseBitMapInstance(bitmapinstance)",
		"snippet": "ReleaseBitMapInstance(${1:APTR bitmapinstance})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a bitmap instance object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ReleaseBitMapSource(bitmapsource)",
		"snippet": "ReleaseBitMapSource(${1:APTR bitmapsource})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a bitmap source object. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ReleaseCapturedExpressions(first)",
		"snippet": "ReleaseCapturedExpressions(${1:struct CapturedExpression *first})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release memory allocated by a call to CapturePattern(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "ReleaseCopyOfSocket(sock, id)",
		"snippet": "ReleaseCopyOfSocket(${1:LONG sock}, ${2:LONG id})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Duplicate a socket descriptor, then release the duplicate to the public list.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ReleaseDomainNameServerList(list)",
		"snippet": "ReleaseDomainNameServerList(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a list of local domain server addresses as returned by ObtainDomainNameServerList().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ReleaseIBackFill(hook)",
		"snippet": "ReleaseIBackFill(${1:struct Hook *hook})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a lock on an Intuition backfill hook. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ReleaseInterfaceList(list)",
		"snippet": "ReleaseInterfaceList(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release a list of available interfaces, as returned by ObtainInterfaceList().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "ReleaseIPluginList(list)",
		"snippet": "ReleaseIPluginList(${1:struct List *list})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ReleaseKeyMapInfo(handle, ...)",
		"snippet": "ReleaseKeyMapInfo(${1:APTR handle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release info obtained from a keymap handle. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ReleaseKeyMapInfoA(handle, taglist)",
		"snippet": "ReleaseKeyMapInfoA(${1:APTR handle}, ${2:const struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release info obtained from a keymap handle. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/keymap.doc.txt"
	},
	{
		"displayText": "ReleaseSocket(sock, id)",
		"snippet": "ReleaseSocket(${1:LONG sock}, ${2:LONG id})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Release a socket to the public list.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "RelocateSection(ElfHandle, taglist)",
		"snippet": "RelocateSection(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Relocate a section.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "RelocateSectionTags(ElfHandle, ...)",
		"snippet": "RelocateSectionTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Relocate a section. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "RemInterface(interface)",
		"snippet": "RemInterface(${1:struct Interface *interface})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove an interface from it's library. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "RemoteSync(...)",
		"snippet": "RemoteSync(${1:...})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get/set time from a remote timeserver. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/timesync.doc.txt"
	},
	{
		"displayText": "RemoteSyncA(taglist)",
		"snippet": "RemoteSyncA(${1:const struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Get/set time from a remote timeserver.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/timesync.doc.txt"
	},
	{
		"displayText": "RemoveCmdPathNode(pathNode, lock)",
		"snippet": "RemoveCmdPathNode(${1:struct PathNode *pn}, ${2:BPTR lock})${3:}",
		"type": "function",
		"leftLabel": "struct PathNode*",
		"description": "Remove an entry from a shell search path list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "RemoveDomainNameServer(address)",
		"snippet": "RemoveDomainNameServer(${1:STRPTR address})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Remove a domain name server address from the local resolver database.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "RemoveNetMonitorHook(hook)",
		"snippet": "RemoveNetMonitorHook(${1:struct Hook *hook})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Remove a network monitoring callback hook previously installed with AddNetMonitorHookTagList().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "RemoveSkipNode(skipList, key)",
		"snippet": "RemoveSkipNode(${1:struct SkipList *skipList}, ${2:APTR key})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Remove a node from a skip list. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "RemoveSplayNode(splayTree, key)",
		"snippet": "RemoveSplayNode(${1:struct SplayTree *splayTree}, ${2:APTR key})${3:}",
		"type": "function",
		"leftLabel": "struct SplayNode*",
		"description": "Remove a node from a splay tree. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "RemResetCallback(resetCallback)",
		"snippet": "RemResetCallback(${1:struct Interrupt *resetCallback})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remoce a reset handler from the system. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "RemTrackable(usingTask, trackable)",
		"snippet": "RemTrackable(${1:struct Task *usingTask}, ${2:struct Trackable *trackable})${3:}",
		"type": "function",
		"leftLabel": "struct Trackable*",
		"description": "Remove a trackable object from a task. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "RenameDosEntry(dlist, newname)",
		"snippet": "RenameDosEntry(${1:struct DosList *dlist}, ${2:CONST_STRPTR newname})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Renames a DosList node. (V51.13)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "RestartTask(whichTask, flags)",
		"snippet": "RestartTask(${1:struct Task *whichTask}, ${2:ULONG flags})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Restart a task that has been suspended. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "SaveDTObjectA(object, window, req, file, mode, saveicon, attrs)",
		"snippet": "SaveDTObjectA(${1:Object *o}, ${2:struct Window *win}, ${3:struct Requester *req}, ${4:CONST_STRPTR file}, ${5:ULONG mode}, ${6:BOOL saveicon}, ${7:CONST struct TagItem *attrs})${8:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Save object's contents. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "ScanSymbolTable(ElfHandle, hook, tagList)",
		"snippet": "ScanSymbolTable(${1:Elf32_Handle ElfHandle}, ${2:struct Hook *hook}, ${3:struct TagItem *tagList})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Scan the symbol table.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "ScanSymbolTableTags(ElfHandle, hook, ...)",
		"snippet": "ScanSymbolTableTags(${1:Elf32_Handle ElfHandle}, ${2:struct Hook *hook}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Scan the symbol table. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "ScanVars(hook, flags, userdata)",
		"snippet": "ScanVars(${1:const struct Hook *hook}, ${2:ULONG flags}, ${3:CONST_APTR userdata})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Scan through global and/or local Vars. (V50.64)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SearchCmdPathList(pathNode, hook, name, tags)",
		"snippet": "SearchCmdPathList(${1:const struct PathNode *pn}, ${2:const struct Hook *h}, ${3:CONST_STRPTR name}, ${4:const struct TagItem *tags})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Locate an object along a shell search path. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SearchCmdPathListTags(pathNode, hook, name, ...)",
		"snippet": "SearchCmdPathListTags(${1:const struct PathNode *pn}, ${2:const struct Hook *h}, ${3:CONST_STRPTR name}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Locate an object along a shell search path. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SecondsToDateStamp(seconds, dateStamp)",
		"snippet": "SecondsToDateStamp(${1:ULONG seconds}, ${2:struct DateStamp *ds})${3:}",
		"type": "function",
		"leftLabel": "struct DateStamp*",
		"description": "Convert \"Amiga Time\" to a DateStamp. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SelectErrorOutput(fileHandle)",
		"snippet": "SelectErrorOutput(${1:BPTR fh})${2:}",
		"type": "function",
		"leftLabel": "BPTR",
		"description": "Select a filehandle as the default error output stream. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SendApplicationMsg(senderAppID, receiverAppID, msg, msgType)",
		"snippet": "SendApplicationMsg(${1:uint32 senderAppID}, ${2:uint32 receiverAppID}, ${3:struct ApplicationMsg *msg}, ${4:uint32 msgType})${5:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Sends a message to one or many applications.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "SetAppLibAttrs(...)",
		"snippet": "SetAppLibAttrs(${1:...})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set/Change global application.library attributes. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "SetAppLibAttrsA(tags)",
		"snippet": "SetAppLibAttrsA(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set/Change global application.library attributes.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "SetApplicationAttrs(appID, ...)",
		"snippet": "SetApplicationAttrs(${1:uint32 appID}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set/Change application attributes. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "SetApplicationAttrsA(appID, tags)",
		"snippet": "SetApplicationAttrsA(${1:uint32 appID}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set/Change application attributes.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "SetBackFillHookAttrs(hook, ...)",
		"snippet": "SetBackFillHookAttrs(${1:struct Hook *h}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Change backfill hook attributes. (varargs) (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "SetBackFillHookAttrsA(hook, tags)",
		"snippet": "SetBackFillHookAttrsA(${1:struct Hook *h}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Change backfill hook attributes. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "SetBlockingMode(stream, new_blocking_mode)",
		"snippet": "SetBlockingMode(${1:BPTR stream}, ${2:LONG new_blocking_mode})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Choose whether a file system or handler should immediately respond to a read/write request or delay its processing until it can be satisfied. (V50).",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SetCurrentCmdPathList(pathNode)",
		"snippet": "SetCurrentCmdPathList(${1:struct PathNode *pn})${2:}",
		"type": "function",
		"leftLabel": "struct PathNode*",
		"description": "Changes the shell search path. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SetElfAttrs(ElfHandle, taglist)",
		"snippet": "SetElfAttrs(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set Attributes of an ELF handle.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "SetElfAttrsTags(ElfHandle, ...)",
		"snippet": "SetElfAttrsTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set Attributes of an ELF handle. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "SetErrnoPtr(errno_ptr, size)",
		"snippet": "SetErrnoPtr(${1:APTR errno_ptr}, ${2:LONG size})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Set the reference to the errno variable.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "SetFileHandleAttr(fileHandle, tags)",
		"snippet": "SetFileHandleAttr(${1:BPTR fh}, ${2:const struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change attributes of a buffered FileHandle. (V51.49)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SetFileHandleAttrTags(fileHandle, ...)",
		"snippet": "SetFileHandleAttrTags(${1:BPTR fh}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change attributes of a buffered FileHandle. (varargs) (V51.49)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SetGUIAttrs(reserved, drawinfo, ...)",
		"snippet": "SetGUIAttrs(${1:APTR reserved}, ${2:struct DrawInfo *drawinfo}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Specify attribute values for the Intuition GUI. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetGUIAttrsA(reserved, drawinfo, taglist)",
		"snippet": "SetGUIAttrsA(${1:APTR reserved}, ${2:struct DrawInfo *drawinfo}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Specify attribute values for the Intuition GUI. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetLayerInfoBounds(layerInfo, bounds)",
		"snippet": "SetLayerInfoBounds(${1:struct Layer_Info *li}, ${2:struct Rectangle *bounds})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Define clipping bounds for all layers. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "SetMarkedBlock(sgw, block)",
		"snippet": "SetMarkedBlock(${1:struct SGWork *sgw}, ${2:ULONG block})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "SetMethod(interface, funcOffset, newFunc)",
		"snippet": "SetMethod(${1:struct Interface *interface}, ${2:LONG funcOffset}, ${3:CONST_APTR newFunc})${4:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Modify a method in an interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "SetPartitionNodeAttrs(par1, ...)",
		"snippet": "SetPartitionNodeAttrs(${1:struct Node *par1}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Set attributes of a partition node. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "SetPartitionNodeAttrsA(par1, last)",
		"snippet": "SetPartitionNodeAttrsA(${1:struct Node *par1}, ${2:struct TagItem *last})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Set attributes of a partition node.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/partition_gc.doc.txt"
	},
	{
		"displayText": "SetPixieAttrs(pixie, ...)",
		"snippet": "SetPixieAttrs(${1:Pixie pixie}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "SetPixieAttrsA(pixie, tags)",
		"snippet": "SetPixieAttrsA(${1:Pixie pixie}, ${2:CONST struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "SetProcWindow(window)",
		"snippet": "SetProcWindow(${1:CONST_APTR win})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Set the current process' DOS window pointer. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SetRenderDomain(rastPort, domain)",
		"snippet": "SetRenderDomain(${1:struct RastPort *rp}, ${2:struct Rectangle *domain})${3:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Set a logical container for GUI rendering. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetRexxVarFromMsg(name, value, message)",
		"snippet": "SetRexxVarFromMsg(${1:STRPTR name}, ${2:STRPTR value}, ${3:struct RexxMsg *message})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Set the value of an ARexx variable. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/rexxsyslib.doc.txt"
	},
	{
		"displayText": "SetScreenAttr(scr, attribute, data, size)",
		"snippet": "SetScreenAttr(${1:struct Screen *scr}, ${2:ULONG attr}, ${3:APTR data}, ${4:ULONG size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change a screen attribute. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetScreenAttrs(scr, ...)",
		"snippet": "SetScreenAttrs(${1:struct Screen *scr}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change multiple screen attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetScreenAttrsA(scr, taglist)",
		"snippet": "SetScreenAttrsA(${1:struct Screen *scr}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change multiple screen attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetSocketSignals(int_mask, io_mask, urgent_mask)",
		"snippet": "SetSocketSignals(${1:ULONG int_mask}, ${2:ULONG io_mask}, ${3:ULONG urgent_mask})${4:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Set the signals to be sent for socket events.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "SetTaskTrap(trapNum, trapCode, trapData)",
		"snippet": "SetTaskTrap(${1:ULONG trapNum}, ${2:CONST_APTR trapCode}, ${3:CONST_APTR trapData})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Set a task-local trap handler. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "SetupPixieField(pixieField, rastPort, ...)",
		"snippet": "SetupPixieField(${1:PixieField pixief}, ${2:struct RastPort *rp}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "SetWindowAttr(window, attribute, data, size)",
		"snippet": "SetWindowAttr(${1:struct Window *win}, ${2:ULONG attr}, ${3:APTR data}, ${4:ULONG size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change a window attribute. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetWindowAttrs(window, ...)",
		"snippet": "SetWindowAttrs(${1:struct Window *win}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change multiple window attributes. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SetWindowAttrsA(window, taglist)",
		"snippet": "SetWindowAttrsA(${1:struct Window *win}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change multiple window attributes. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ShadeRect(rastPort, minx, miny, maxx, maxy, shadelevel, backtype, state, drawInfo, ...)",
		"snippet": "ShadeRect(${1:struct RastPort *rp}, ${2:LONG minx}, ${3:LONG miny}, ${4:LONG maxx}, ${5:LONG maxy}, ${6:ULONG shadelevel}, ${7:ULONG backtype}, ${8:ULONG state}, ${9:struct DrawInfo *dri}, ${10:...})${11:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Fill a rectangle with context-sensitive graphics. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ShadeRectA(rastPort, minx, miny, maxx, maxy, shadelevel, backtype, state, drawInfo, taglist)",
		"snippet": "ShadeRectA(${1:struct RastPort *rp}, ${2:LONG minx}, ${3:LONG miny}, ${4:LONG maxx}, ${5:LONG maxy}, ${6:ULONG shadelevel}, ${7:ULONG backtype}, ${8:ULONG state}, ${9:struct DrawInfo *dri}, ${10:struct TagItem *taglist})${11:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Fill a rectangle with context-sensitive graphics. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ShadeRectOld(rastPort, minx, miny, maxx, maxy, shadelevel, backtype, state, drawInfo)",
		"snippet": "ShadeRectOld(${1:struct RastPort *rp}, ${2:LONG minx}, ${3:LONG miny}, ${4:LONG maxx}, ${5:LONG maxy}, ${6:ULONG shadelevel}, ${7:ULONG backtype}, ${8:ULONG state}, ${9:struct DrawInfo *dri})${10:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Fill a rectangle with context-sensitive graphics. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "ShowLayer(layer, infront_of)",
		"snippet": "ShowLayer(${1:struct Layer *layer}, ${2:struct Layer *infront_of})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Make invisible layer visible again. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/layers.doc.txt"
	},
	{
		"displayText": "ShowWindow(window, other)",
		"snippet": "ShowWindow(${1:struct Window *window}, ${2:struct Window *other})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Make invisible window visible again. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "SKETCHBOARD_GetClass()",
		"snippet": "SKETCHBOARD_GetClass()",
		"type": "function",
		"leftLabel": "Class*",
		"description": "Gets pointer to the sketchboard class.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/sketchboard_gc.doc.txt"
	},
	{
		"displayText": "SNPrintf(buffer, bufferSize, fmt, ...)",
		"snippet": "SNPrintf(${1:STRPTR buffer}, ${2:LONG bufferSize}, ${3:CONST_STRPTR fmt}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Size-bounded formatted output conversion. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "SocketBaseTagList(tags)",
		"snippet": "SocketBaseTagList(${1:struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Get/set global library attributes.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "SocketBaseTags(...)",
		"snippet": "SocketBaseTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Get/set global library attributes. (varargs)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "StartDMA(startAddr, blockSize, flags)",
		"snippet": "StartDMA(${1:CONST_APTR startAddr}, ${2:ULONG blockSize}, ${3:ULONG flags})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Prepare for a hardware DMA access. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "StartDragSelect(object)",
		"snippet": "StartDragSelect(${1:Object *o})${2:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Start drag-selection. (V45)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/datatypes.doc.txt"
	},
	{
		"displayText": "StartScreenNotifyTagList(taglist)",
		"snippet": "StartScreenNotifyTagList(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Starts notification on a screen. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "StartScreenNotifyTags(...)",
		"snippet": "StartScreenNotifyTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Starts notification on a screen. (varargs) (V50)",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "StripIntuiMessages(port, window)",
		"snippet": "StripIntuiMessages(${1:struct MsgPort *port}, ${2:struct Window *win})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Remove and reply all IntuiMessages on a port that have been sent to a particular window. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "Strlcat(dest, source, size)",
		"snippet": "Strlcat(${1:STRPTR dest}, ${2:CONST_STRPTR src}, ${3:LONG size})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Size-bounded string concatenation. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "Strlcpy(dest, source, size)",
		"snippet": "Strlcpy(${1:STRPTR dest}, ${2:CONST_STRPTR src}, ${3:LONG size})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Size-bounded string copy. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "SubtractDates(to, from)",
		"snippet": "SubtractDates(${1:struct DateStamp *to}, ${2:const struct DateStamp *from})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Subtract one DateStamp from another. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "SumInterface(interface)",
		"snippet": "SumInterface(${1:struct Interface *interface})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Calculate the checksum of an interface. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "SuspendTask(whichTask, flags)",
		"snippet": "SuspendTask(${1:struct Task *whichTask}, ${2:ULONG flags})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Suspend a task from execution. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "SymbolQuery(ElfHandle, NumQueries, Queries)",
		"snippet": "SymbolQuery(${1:Elf32_Handle ElfHandle}, ${2:ULONG NumQueries}, ${3:struct Elf32_SymbolQuery *Queries})${4:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Search for a set of symbols in an ELF file.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "TimedDosRequester(tags)",
		"snippet": "TimedDosRequester(${1:const struct TagItem *tags})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "EasyRequest() style function via DOS. (V51.12)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "TimedDosRequesterTags(...)",
		"snippet": "TimedDosRequesterTags(${1:...})${2:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "EasyRequest() style function via DOS. (varargs) (V51.12)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "TrackAddressList(name, segment, extra_info, extra_info_size, aas, num_pairs)",
		"snippet": "TrackAddressList(${1:CONST_STRPTR name}, ${2:BPTR segment}, ${3:CONST_APTR extra_info}, ${4:LONG extra_info_size}, ${5:const struct AddressAndSize *aas}, ${6:LONG num_pairs})${7:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Register a number of addresses to search for address ranges. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "TrackSegmentList(name, segment, extra_info, extra_info_size)",
		"snippet": "TrackSegmentList(${1:CONST_STRPTR name}, ${2:BPTR segment}, ${3:CONST_APTR extra_info}, ${4:LONG extra_info_size})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Register a segment list to search for address ranges with IDOS->FindTrackedAddress(). (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "UndrawPixieField(pixieField)",
		"snippet": "UndrawPixieField(${1:PixieField pixief})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "UnloadSection(ElfHandle, taglist)",
		"snippet": "UnloadSection(${1:Elf32_Handle ElfHandle}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unload a memory-resident section.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "UnloadSectionTags(ElfHandle, ...)",
		"snippet": "UnloadSectionTags(${1:Elf32_Handle ElfHandle}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unload a memory-resident section. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/elf.doc.txt"
	},
	{
		"displayText": "UnlockApplicationIcon(appID)",
		"snippet": "UnlockApplicationIcon(${1:uint32 appID})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unlock a previously locked application icon.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "UnlockGUIPrefs(lock)",
		"snippet": "UnlockGUIPrefs(${1:APTR lock})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "UnlockMem(baseAddress, size)",
		"snippet": "UnlockMem(${1:APTR baseAddress}, ${2:ULONG size})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unlock an address. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/exec.doc.txt"
	},
	{
		"displayText": "UnlockScreen(screen)",
		"snippet": "UnlockScreen(${1:struct Screen *screen})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Unlock a screen. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "UnlockScreenGI(gadgetInfo, rastPort)",
		"snippet": "UnlockScreenGI(${1:struct GadgetInfo *gi}, ${2:struct RastPort *rp})${3:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Unlock a screen. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "UnlockScreenList()",
		"snippet": "UnlockScreenList()",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Release screen list semaphore. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/intuition.doc.txt"
	},
	{
		"displayText": "UnregisterApplication(appID, ...)",
		"snippet": "UnregisterApplication(${1:uint32 appID}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Unregister a application. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "UnregisterApplicationA(appID, tags)",
		"snippet": "UnregisterApplicationA(${1:uint32 appID}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "BOOL",
		"description": "Unregister a application.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "UnTrackAddress(address)",
		"snippet": "UnTrackAddress(${1:APTR address})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Unregister a single address being tracked. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "UnTrackSegmentList(segment)",
		"snippet": "UnTrackSegmentList(${1:BPTR segment})${2:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Unregister a segment list being tracked. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "UpdateWindowPrefs(screen)",
		"snippet": "UpdateWindowPrefs(${1:struct Screen *screen})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "UpdateWorkbench(name, lock, action)",
		"snippet": "UpdateWorkbench(${1:CONST_STRPTR name}, ${2:ULONG lock}, ${3:LONG action})${4:}",
		"type": "function",
		"leftLabel": "VOID",
		"description": "Tell Workbench of a new or deleted icon. (V37)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/workbench.doc.txt"
	},
	{
		"displayText": "USBAddFunction(ushubifc, ...)",
		"snippet": "USBAddFunction(${1:struct UsbInterface *ushubifc}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawFunction*",
		"description": "Add a USB Function to the System Software. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBAddFunctionA(ushubifc, taglist)",
		"snippet": "USBAddFunctionA(${1:struct UsbInterface *ushubifc}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawFunction*",
		"description": "Add a USB Function to the System Software.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBAllocRequest(openreq, ...)",
		"snippet": "USBAllocRequest(${1:struct IORequest *openreq}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct USBIOReq*",
		"description": "Allocate a USBIOReq structure. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBAllocRequestA(openreq, taglist)",
		"snippet": "USBAllocRequestA(${1:struct IORequest *openreq}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct USBIOReq*",
		"description": "Allocate a USBIOReq structure.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBClaimFunction(rawfkt, fdfkt, port)",
		"snippet": "USBClaimFunction(${1:struct UsbRawFunction *rawfkt}, ${2:APTR fdfkt}, ${3:struct MsgPort *port})${4:}",
		"type": "function",
		"leftLabel": "struct UsbFunction*",
		"description": "Claim USB Function for communication ownership.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBClaimInterface(rawifc, fdifc, port)",
		"snippet": "USBClaimInterface(${1:struct UsbRawInterface *rawifc}, ${2:APTR fdifc}, ${3:struct MsgPort *port})${4:}",
		"type": "function",
		"leftLabel": "struct UsbInterface*",
		"description": "Claim USB Interface for communication ownership.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBDeclaimFunction(usfkt)",
		"snippet": "USBDeclaimFunction(${1:struct UsbFunction *usfkt})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Give up ownership of a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBDeclaimInterface(usifc)",
		"snippet": "USBDeclaimInterface(${1:struct UsbInterface *usifc})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Give up ownership of a USB Interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBEPControlXfer(openreq, usep, rcmd, rtype, rval, ridx, buf, buflen, ...)",
		"snippet": "USBEPControlXfer(${1:struct IORequest *openreq}, ${2:struct UsbEndPoint *usep}, ${3:ULONG rcmd}, ${4:ULONG rtype}, ${5:ULONG rval}, ${6:ULONG ridx}, ${7:APTR buf}, ${8:ULONG buflen}, ${9:...})${10:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Perform a single Control Transfer operation on a USB EndPoint. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBEPControlXferA(openreq, usep, rcmd, rtype, rval, ridx, buf, buflen, taglist)",
		"snippet": "USBEPControlXferA(${1:struct IORequest *openreq}, ${2:struct UsbEndPoint *usep}, ${3:ULONG rcmd}, ${4:ULONG rtype}, ${5:ULONG rval}, ${6:ULONG ridx}, ${7:APTR buf}, ${8:ULONG buflen}, ${9:struct TagItem *taglist})${10:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Perform a single Control Transfer operation on a USB EndPoint.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBEPGetDescriptor(openreq, usep, rtype, dtyp, didx, ...)",
		"snippet": "USBEPGetDescriptor(${1:struct IORequest *openreq}, ${2:struct UsbEndPoint *usep}, ${3:ULONG rtype}, ${4:LONG dtyp}, ${5:LONG didx}, ${6:...})${7:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a descriptor from a USB EndPoint. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBEPGetDescriptorA(openreq, usep, rtype, dtyp, didx, taglist)",
		"snippet": "USBEPGetDescriptorA(${1:struct IORequest *openreq}, ${2:struct UsbEndPoint *usep}, ${3:ULONG rtype}, ${4:LONG dtyp}, ${5:LONG didx}, ${6:struct TagItem *taglist})${7:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a descriptor from a USB EndPoint.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFDGetAttrs(...)",
		"snippet": "USBFDGetAttrs(${1:...})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Query a Function Driver for its attributes. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbfd.doc.txt"
	},
	{
		"displayText": "USBFDGetAttrsA(taglist)",
		"snippet": "USBFDGetAttrsA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Function based Function Driver entry point.",
		"descriptionMoreURL": ""
	},
	{
		"displayText": "USBFDRunFunction(startmsg)",
		"snippet": "USBFDRunFunction(${1:struct USBFDStartupMsg *startmsg})${2:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Function based Function Driver entry point.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbfd.doc.txt"
	},
	{
		"displayText": "USBFDRunInterface(startmsg)",
		"snippet": "USBFDRunInterface(${1:struct USBFDStartupMsg *startmsg})${2:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Interface based Function Driver entry point.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbfd.doc.txt"
	},
	{
		"displayText": "USBFindFunction(curfkt, ...)",
		"snippet": "USBFindFunction(${1:struct UsbRawFunction *curfkt}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawFunction*",
		"description": "Find a USB Function based on its properties. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFindFunctionA(curfkt, taglist)",
		"snippet": "USBFindFunctionA(${1:struct UsbRawFunction *curfkt}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawFunction*",
		"description": "Find a USB Function based on its properties.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFindInterface(curifc, ...)",
		"snippet": "USBFindInterface(${1:struct UsbRawInterface *curifc}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawInterface*",
		"description": "Find a USB Interface based on its properties. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFindInterfaceA(curifc, taglist)",
		"snippet": "USBFindInterfaceA(${1:struct UsbRawInterface *curifc}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "struct UsbRawInterface*",
		"description": "Find a USB Interface based on its properties.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFktGetCfgDescriptors(openreq, usfkt, cfgid, ...)",
		"snippet": "USBFktGetCfgDescriptors(${1:struct IORequest *openreq}, ${2:struct UsbFunction *usfkt}, ${3:ULONG cfgid}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "struct USBBusCfgDsc*",
		"description": "Get a configuration descriptor set from a USB Function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFktGetCfgDescriptorsA(openreq, usfkt, cfgid, taglist)",
		"snippet": "USBFktGetCfgDescriptorsA(${1:struct IORequest *openreq}, ${2:struct UsbFunction *usfkt}, ${3:ULONG cfgid}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "struct USBBusCfgDsc*",
		"description": "Get a configuration descriptor set from a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFktSetConfiguration(openreq, fkt, cfgdsc, ...)",
		"snippet": "USBFktSetConfiguration(${1:struct IORequest *openreq}, ${2:struct UsbFunction *fkt}, ${3:struct USBBusCfgDsc *cfgdsc}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change the configuration of a USB Function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFktSetConfigurationA(openreq, fkt, cfgdsc, taglist)",
		"snippet": "USBFktSetConfigurationA(${1:struct IORequest *openreq}, ${2:struct UsbFunction *fkt}, ${3:struct USBBusCfgDsc *cfgdsc}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change the configuration of a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFreeDescriptors(descriptor)",
		"snippet": "USBFreeDescriptors(${1:struct USBBusDscHead *dscr})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free a list of descriptors as returned by USBParseDescriptors().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBFreeRequest(req)",
		"snippet": "USBFreeRequest(${1:struct USBIOReq *req})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Free a USBIOReq request allocated with USBAllocRequestA()",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetEndPoint(usfkt, usifc, epnum)",
		"snippet": "USBGetEndPoint(${1:struct UsbFunction *usfkt}, ${2:struct UsbInterface *usifc}, ${3:LONG epnum})${4:}",
		"type": "function",
		"leftLabel": "struct UsbEndPoint*",
		"description": "Obtain an EndPoint reference from a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetInterface(usfkt, ifcnum)",
		"snippet": "USBGetInterface(${1:struct UsbFunction *usfkt}, ${2:LONG ifcnum})${3:}",
		"type": "function",
		"leftLabel": "struct UsbInterface*",
		"description": "Get an Interface from a claimed Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetRawFunctionAttrs(rawfkt, ...)",
		"snippet": "USBGetRawFunctionAttrs(${1:struct UsbRawFunction *rawfkt}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about an unclaimed USB Function. (varargs) (new in v1.11)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetRawFunctionAttrsA(rawfkt, taglist)",
		"snippet": "USBGetRawFunctionAttrsA(${1:struct UsbRawFunction *rawfkt}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about an unclaimed USB Function. (new in v1.11)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetRawInterfaceAttrs(rawifc, ...)",
		"snippet": "USBGetRawInterfaceAttrs(${1:struct UsbRawInterface *rawifc}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about an unclaimed USB Interface. (varargs) (new in v1.11)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetRawInterfaceAttrsA(rawifc, taglist)",
		"snippet": "USBGetRawInterfaceAttrsA(${1:struct UsbRawInterface *rawifc}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about an unclaimed USB Interface. (new in v1.11)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetStackAttrs(...)",
		"snippet": "USBGetStackAttrs(${1:...})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about the USB stack. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBGetStackAttrsA(taglist)",
		"snippet": "USBGetStackAttrsA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Get information about the USB stack.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBHCAddEndPoint(hcunit, hcfkt, usep, epnum, ...)",
		"snippet": "USBHCAddEndPoint(${1:APTR hcunit}, ${2:APTR hcfkt}, ${3:APTR usep}, ${4:int32 epnum}, ${5:...})${6:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add an EndPoint to a Function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCAddEndPointA(hcunit, hcfkt, usep, epnum, taglist)",
		"snippet": "USBHCAddEndPointA(${1:APTR hcunit}, ${2:APTR hcfkt}, ${3:APTR usep}, ${4:int32 epnum}, ${5:struct TagItem *taglist})${6:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add an EndPoint to a Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCAddFunction(hcunit, hchub, usfkt, ...)",
		"snippet": "USBHCAddFunction(${1:APTR hcunit}, ${2:APTR hchub}, ${3:APTR usfkt}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a USB Function to a HCD. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCAddFunctionA(hcunit, hchub, usfkt, taglist)",
		"snippet": "USBHCAddFunctionA(${1:APTR hcunit}, ${2:APTR hchub}, ${3:APTR usfkt}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a USB Function to a HCD.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCGetAttrs(...)",
		"snippet": "USBHCGetAttrs(${1:...})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Query a HCD for its properties. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCGetAttrsA(taglist)",
		"snippet": "USBHCGetAttrsA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Query a HCD for its properties.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCInitRootHub(hcunit, usifc, hcfkt, ...)",
		"snippet": "USBHCInitRootHub(${1:APTR hcunit}, ${2:struct UsbRawInterface *usifc}, ${3:APTR *hcfkt}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Initialize and start the Root Hub driver of a HCD unit. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCInitRootHubA(hcunit, usifc, hcfkt, taglist)",
		"snippet": "USBHCInitRootHubA(${1:APTR hcunit}, ${2:struct UsbRawInterface *usifc}, ${3:APTR *hcfkt}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "int32",
		"description": "Initialize and start the Root Hub driver of a HCD unit.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCRemEndPoint(hcunit, hcep)",
		"snippet": "USBHCRemEndPoint(${1:APTR hcunit}, ${2:APTR hcep})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove an EndPoint from a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCRemFunction(hcunit, hcfkt)",
		"snippet": "USBHCRemFunction(${1:APTR hcunit}, ${2:APTR hcfkt})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove a USB Function from a HCD.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBHCUninitRootHub(hcunit, hcfkt)",
		"snippet": "USBHCUninitRootHub(${1:APTR hcunit}, ${2:APTR hcfkt})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Uninitialize and terminate the Root Hub driver of a HCD unit.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbhcd.doc.txt"
	},
	{
		"displayText": "USBIntGetAltSetting(openreq, usifc, ...)",
		"snippet": "USBIntGetAltSetting(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a copy of the current Alternate Setting Interface descriptor list of an Interface. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBIntGetAltSettingA(openreq, usifc, taglist)",
		"snippet": "USBIntGetAltSettingA(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a copy of the current Alternate Setting Interface descriptor list of an Interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBIntGetConfiguration(openreq, usifc, ...)",
		"snippet": "USBIntGetConfiguration(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a copy of the configuration descriptor list of an Interface's parent Function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBIntGetConfigurationA(openreq, usifc, taglist)",
		"snippet": "USBIntGetConfigurationA(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get a copy of the configuration descriptor list of an Interface's parent Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBIntSetAltSetting(openreq, usifc, altnum, ...)",
		"snippet": "USBIntSetAltSetting(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:ULONG altnum}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change the current Alternate Setting of an Interface. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBIntSetAltSettingA(openreq, usifc, altnum, taglist)",
		"snippet": "USBIntSetAltSettingA(${1:struct IORequest *openreq}, ${2:struct UsbInterface *usifc}, ${3:ULONG altnum}, ${4:struct TagItem *taglist})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Change the current Alternate Setting of an Interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBLockFunction(rawfkt)",
		"snippet": "USBLockFunction(${1:struct UsbRawFunction *rawfkt})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Lock an unclaimed USB Function from being expunged.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBLockInterface(rawifc)",
		"snippet": "USBLockInterface(${1:struct UsbRawInterface *rawifc})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Lock an unclaimed USB Interface from being expunged.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBLogPuts(err, context, msg)",
		"snippet": "USBLogPuts(${1:LONG err}, ${2:CONST_STRPTR context}, ${3:CONST_STRPTR msg})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Append an entry to the USB System log.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBLogVPrintf(err, context, msg, fmtargs)",
		"snippet": "USBLogVPrintf(${1:LONG err}, ${2:CONST_STRPTR context}, ${3:CONST_STRPTR msg}, ${4:ULONG *fmtargs})${5:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Append an entry to the USB System log using a vprintf-style formatting string.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBNextDescriptor(descriptor)",
		"snippet": "USBNextDescriptor(${1:struct USBBusDscHead *dscr})${2:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get next descriptor in a list of descriptors as returned by USBParseDescriptors().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBObtainResource(type, object, ...)",
		"snippet": "USBObtainResource(${1:ULONG type}, ${2:APTR object}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain access to a shared USB resource. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBObtainResourceA(type, object, taglist)",
		"snippet": "USBObtainResourceA(${1:ULONG type}, ${2:APTR object}, ${3:struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Obtain access to a shared USB resource.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBParseDescriptors(buffer, buflen)",
		"snippet": "USBParseDescriptors(${1:struct USBBusDscHead *buffer}, ${2:ULONG buflen})${3:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Parse a buffer holding one or more USB descriptors.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBPrevDescriptor(descriptor)",
		"snippet": "USBPrevDescriptor(${1:struct USBBusDscHead *dscr})${2:}",
		"type": "function",
		"leftLabel": "struct USBBusDscHead*",
		"description": "Get previous descriptor in a list of descriptors as returned by USBParseDescriptors().",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBReleaseResource(type, object)",
		"snippet": "USBReleaseResource(${1:ULONG type}, ${2:APTR object})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Release access to a shared USB resource.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBRemFunction(rawfkt, ushubifc)",
		"snippet": "USBRemFunction(${1:struct UsbRawFunction *rawfkt}, ${2:struct UsbInterface *ushubifc})${3:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Signal physical detachment of a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBResAddNotify(type, port)",
		"snippet": "USBResAddNotify(${1:uint32 type}, ${2:struct MsgPort *port})${3:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a subscription for global USB notifications (new in v1.8)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResRegisterFD(...)",
		"snippet": "USBResRegisterFD(${1:...})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a Function Driver to list of available Function Drivers. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResRegisterFDA(taglist)",
		"snippet": "USBResRegisterFDA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a Function Driver to list of available Function Drivers.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResRegisterHCD(...)",
		"snippet": "USBResRegisterHCD(${1:...})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a Host Controller Driver to list of available Host Controller Drivers. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResRegisterHCDA(taglist)",
		"snippet": "USBResRegisterHCDA(${1:struct TagItem *taglist})${2:}",
		"type": "function",
		"leftLabel": "APTR",
		"description": "Add a Host Controller Driver to list of available Host Controller Drivers.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResRemNotify(subs)",
		"snippet": "USBResRemNotify(${1:APTR subs})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove a USB notification subscription. (new in v1.8)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResUnregisterFD(fdkey)",
		"snippet": "USBResUnregisterFD(${1:APTR fdkey})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove a Function Driver from the list of available Function Drivers.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBResUnregisterHCD(hcdkey)",
		"snippet": "USBResUnregisterHCD(${1:APTR hcdkey})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Remove a HCD from the list of available HCDs.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbresource.doc.txt"
	},
	{
		"displayText": "USBSetFunctionAttrs(clfkt, ...)",
		"snippet": "USBSetFunctionAttrs(${1:struct UsbFunction *clfkt}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Modify the attributes of a USB Function. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBSetFunctionAttrsA(clfkt, taglist)",
		"snippet": "USBSetFunctionAttrsA(${1:struct UsbFunction *clfkt}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Modify the attributes of a USB Function.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBSetInterfaceAttrs(clifc, ...)",
		"snippet": "USBSetInterfaceAttrs(${1:struct UsbInterface *clifc}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Modify the attributes of a USB Interface. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBSetInterfaceAttrsA(clifc, taglist)",
		"snippet": "USBSetInterfaceAttrsA(${1:struct UsbInterface *clifc}, ${2:struct TagItem *taglist})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Modify the attributes of a USB Interface.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBUnlockFunction(rawfkt)",
		"snippet": "USBUnlockFunction(${1:struct UsbRawFunction *rawfkt})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unlock a USB Function (allow expunge)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "USBUnlockInterface(rawifc)",
		"snippet": "USBUnlockInterface(${1:struct UsbRawInterface *rawifc})${2:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Unlock a USB Interface (allow expunge)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/usbsys.doc.txt"
	},
	{
		"displayText": "VASPrintf(fmt, args)",
		"snippet": "VASPrintf(${1:CONST_STRPTR fmt}, ${2:APTR args})${3:}",
		"type": "function",
		"leftLabel": "STRPTR",
		"description": "Formatted output conversion; results are stored in dynamically allocated buffer. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "VSNPrintf(buffer, bufferSize, fmt, args)",
		"snippet": "VSNPrintf(${1:STRPTR buffer}, ${2:LONG bufferSize}, ${3:CONST_STRPTR fmt}, ${4:APTR args})${5:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Size-bounded formatted output conversion. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/utility.doc.txt"
	},
	{
		"displayText": "WaitForData(stream, data_direction, timeout)",
		"snippet": "WaitForData(${1:BPTR stream}, ${2:LONG data_direction}, ${3:LONG timeout})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Wait until a stream has data ready to be read or is ready to accept more data to be written. (V50).",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/dos.doc.txt"
	},
	{
		"displayText": "WaitSelect(nfds, read_fds, write_fds, except_fds, _timeout, signals)",
		"snippet": "WaitSelect(${1:LONG nfds}, ${2:APTR read_fds}, ${3:APTR write_fds}, ${4:APTR except_fds}, ${5:struct __timeval *_timeout}, ${6:ULONG *signals})${7:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Synchronous I/O multiplexing.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/bsdsocket.doc.txt"
	},
	{
		"displayText": "WhichWorkbenchObject(window, x, y, ...)",
		"snippet": "WhichWorkbenchObject(${1:struct Window *window}, ${2:LONG x}, ${3:LONG y}, ${4:...})${5:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Query whether a click at the specified coordinates would hit a Workbench icon or window. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/workbench.doc.txt"
	},
	{
		"displayText": "WhichWorkbenchObjectA(window, x, y, tags)",
		"snippet": "WhichWorkbenchObjectA(${1:struct Window *window}, ${2:LONG x}, ${3:LONG y}, ${4:const struct TagItem *tags})${5:}",
		"type": "function",
		"leftLabel": "ULONG",
		"description": "Query whether a click at the specified coordinates would hit a Workbench icon or window. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/workbench.doc.txt"
	},
	{
		"displayText": "WriteClipVector(vector, size)",
		"snippet": "WriteClipVector(${1:CONST_STRPTR vector}, ${2:ULONG size})${3:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Place string vector in the clipboard.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/textclip.doc.txt"
	},
	{
		"displayText": "WriteDiskFontHeader(font, fileName, ...)",
		"snippet": "WriteDiskFontHeader(${1:struct TextFont *font}, ${2:CONST_STRPTR fileName}, ${3:...})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Write a DiskFontHeader image to disk. (varargs) (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "WriteDiskFontHeaderA(font, fileName, taglist)",
		"snippet": "WriteDiskFontHeaderA(${1:struct TextFont *font}, ${2:CONST_STRPTR fileName}, ${3:const struct TagItem *taglist})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Write a DiskFontHeader image to disk. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "WriteExpansionWord(board, offset, word)",
		"snippet": "WriteExpansionWord(${1:APTR board}, ${2:ULONG offset}, ${3:UWORD word})${4:}",
		"type": "function",
		"leftLabel": "void",
		"description": "Write a word in special ways. (V37)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/expansion.doc.txt"
	},
	{
		"displayText": "WriteFontContents(fontsLock, fontName, fontContentsHeader)",
		"snippet": "WriteFontContents(${1:BPTR fontsLock}, ${2:CONST_STRPTR fontName}, ${3:struct FontContentsHeader *fontContentsHeader})${4:}",
		"type": "function",
		"leftLabel": "LONG",
		"description": "Write a FontContents image to disk. (V50)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/diskfont.doc.txt"
	},
	{
		"displayText": "WritePrefs(dict, ...)",
		"snippet": "WritePrefs(${1:PrefsObject *dict}, ${2:...})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Write prefs (==a prefs dictionary) to a file. (varargs)",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	},
	{
		"displayText": "WritePrefsA(dict, tags)",
		"snippet": "WritePrefsA(${1:PrefsObject *dict}, ${2:struct TagItem *tags})${3:}",
		"type": "function",
		"leftLabel": "uint32",
		"description": "Write prefs (==a prefs dictionary) to a file.",
		"descriptionMoreURL": "http://wiki.amigaos.net/amiga/autodocs/application.doc.txt"
	}
